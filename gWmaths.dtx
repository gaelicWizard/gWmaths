%<*!README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\NeedsTeXFormat{LaTeX2e}[2021/11/01]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%!TEX encoding = UTF-8
%%!TEX parameter = -8bit
%%!TEX root = gWmaths.dtx
\ifdefined\DocInput\else\GetIdInfo$Format: %x24Id:  %%
\csname g_file_curr_name_str\endcsname. %(describe:tags,match=v*) %as %%
develop \the\year-\the\month-\the\day 00Z%x24%%
${COVID-19 Quarantine Accessible \TeX{} Project}\fi%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<cls>\ProvidesExplClass%
%<sty>\ProvidesExplPackage%
%<*!sty&!cls>
\ProvidesExplFile%
%</!sty&!cls>
 	{\ExplFileName}	{\ExplFileDate}	{\ExplFileVersion}	{\ExplFileDescription}

%<*ins>
% \section{Installer job file}	\label{ins}
%
% \begin{macro}{l3docstrip}
%
% The ASCII character 9 (tab) becomes |^^I| in \XeTeX*, unless \meta{-8bit} is passed on the command line.
%
% Begin a \TeX* group so the unprotected input doesn't jack up too much stuff, then input \LaTeX3's edition of \pkg{docstrip}.
%
%    \begin{macrocode}
\begingroup	\ExplSyntaxOff	\input l3docstrip
%    \end{macrocode}
%
% Set our build defaults, define the file extension for our documentation driver, and set `tab' category code to character (instead of space) so it makes it through to the stripped files.
%
%    \begin{macrocode}
\ifToplevel{%
	\askforoverwritefalse	%\keepsilent	%
	\usedir{tex/latex/\jobname}	\UseTDS	%
	\nopreamble	\nopostamble	}%
\def\@docextension{drv}	\def\@stripextension{ins}%
%    \end{macrocode}
%
% \begin{macro}{generate,file}
%
% For each of \file{README}, \file{ins}, \file{sty}, \file{cls}, \file{drv}
%  ask \pkg{l3docstrip} to generate the distributables.
%
%    \begin{macrocode}
\generate{	\catcode9=12 % tabs %https://tex.stackexchange.com/a/453323
  \file{README.txt}{\from{\jobname.dtx}{README}}
  %\filename@parse{\jobname.ins} % https://tex.stackexchange.com/a/39636 https://tex.stackexchange.com/a/39647
  %\file{\filename@base.\filename@ext}{\from{\filename@base.dtx}{\filename@ext}}
  %\file{\jobname.\@stripextension}{\from{\jobname.dtx}{\@stripextension}}
  \file{\jobname.\@pkgextension}{\from{\jobname.dtx}{\@pkgextension}}
  \file{\jobname.\@clsextension}{\from{\jobname.dtx}{\@clsextension}}
  %\file{\jobname.\@docextension}{\from{\jobname.dtx}{\@docextension}}
  %\file{MAT-101.tex}{\from{\jobname.dtx}{xmplmain}}
  %\file{Lectures/Chapter~2.tex}{\from{\jobname.dtx}{xmpllecture}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{ReportTotals}
%
% Print some stats to the terminal, then \cs{endgroup} to escape from \pkg{l3docstrip}.
%
%    \begin{macrocode}
}	\ifToplevel{	\ReportTotals	}
%
\endgroup	% \end{l3docstrip}
%<ins>\endbatchfile
%    \end{macrocode}
% \end{macro}
% \end{macro}
%</ins>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\RequirePackage{ iftex,	}	\errorcontextlines20
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*drv>
% \section{Documentation driver file}
%
% Load \LaTeX3's documentation class, load ourselves (utility package), set the document title \etc., then \cs{DocInput} this very file.
%
%    \begin{macrocode}
\DocumentMetadata%
{	testphase=phase-II	}
\documentclass{l3doc}
\usepackage{gWmaths}

%\EnableCrossrefs % Say \DisableCrossrefs if index is ready
\CodelineIndex % \vs. \PageIndex
\RecordChanges % Gather update information
\OnlyDescription % comment out for implementation details

\setlength\hfuzz{15pt}	% dont make so many
\hbadness=7000		% over and under full box warnings

\GetFileInfo{\jobname}
	\title{\fileinfo}
	\date{\filedate}
	\author{\pkg{\filename}
		\thanks{ \url{ https://github.com/gaelicWizard/\filename } } ~
		~ \fileversion }

\ExplSyntaxOn
%\ifPDFTeX\RequestPackage{embedfile,dtx-attach}\fi
{	\pdfdict_put:nnn{l_pdffile/Filespec}	{AFRelationship}	{/Source}
	\pdf_string_from_unicode:nnN	{utf16/string}%
		{\fileinfo}	\l_tmpa_str
	\pdfdict_put:nnx	{l_pdffile/Filespec}	{Desc}	{\l_tmpa_str}
	\pdffile_embed_file:nnn	{gWmaths.dtx}	{gWmaths.dtx}	{gWmaths/dtx}
	\pdfmanagement_add:nnx	{Catalog/Names}	{EmbeddedFiles}	{\pdf_object_ref:n{gWmaths/dtx}}
}% Embed DTX source in PDF.

\AtEndPreamble{\ExplSyntaxOff}
\begin{document}
	\maketitle

\begingroup	\catcode`\<=\catcode`\%
	\ExplSyntaxOn
	%\clist_map_inline:cn {g_gWpkgs_clist} {\file{\jobname}~requires~\pkg{#1}. }
	%\file{\jobname}~requires~the~following~packages:~\clist_use:cn {g_gWpkgs_clist}{,~}.
	%\clist_show:c {g_gWpkgs_clist}
	\ExplSyntaxOff%
%\DescribeMacro{\DescribeMacro} % \vs. \begin{macro}{\DescribeMacro}
%\DescribeEnv{scontents}
% \begin{abstract}\ExplSyntaxOff
%</drv>
%</!README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*drv|README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Programmers believe in a form of ritual hazing called `recursion', and the ability to construct a working DTX is somewhat of a rite of passage before being allowed to publish a \LaTeXe{} package.
Consider this my proof of qualification.

During the great pandemic of 2020, the \cls{gWmaths} class was created to shorten the common preamble from a set of my wife's \LaTeX{} lectures, transparencies, slides, and handouts.
It was initially \cls{pellmaths} and was just a shortcut for 80 lines of boilerplate at the top of every darn file.

With the first week of 2021 declaring \emph{hold my beer}, some effort was made to expand and improve.
The class was renamed to \cls{gWmaths}, partially split out to a \pkg{gWmaths} package, and updated to \LaTeX3.
Meanwhile, the source transformed to require build via \pkg{docstrip} and was brought under version control.

This work has the LPPL maintenance status `maintained'.

The Current Maintainer of this work is 
%<drv>\author{
John Pell
%<drv>\thanks{\url{https://github.com/gaelicWizard/\filename}}}
.

% The list of all files belonging to `gWmaths' is given in the file `manifest.txt'.

%</drv|README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*!README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*drv>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \end{abstract}
% \ExplSyntaxOff

	\tableofcontents % \catcode9=12

	\part{\jobname.dtx}
	\DocInput{\jobname.dtx}
	\part{\jobname.def}
	\DocInput{\jobname.def}
	\part{\jobname.tex}
	%\DocInput{\jobname.tex}
	%\IndexInput{}%
	%\endpart%{\jobname.dtx}%
	%\IndexInput{}
	%\MakeShortVerb{\<}
	%\PrintChanges
	%\PrintIndex
\endgroup
\end{document}
%    \end{macrocode}
%</drv>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*sty>
% \section{Convenience Names for Common Hooks}
% Most of these are provided by the format, so the following declarations do absolutely nothing. Others are provided by \pkg{etoolbox}, so this really only covers the case where \pkg{etoolbox} isn't ever loaded.
%
%    \begin{macrocode}
\AddToHook{ package / etoolbox / before }% Hack to prevent "already defined"
{	\DeclareDocumentCommand\IfFormatAtLeastTF{mmm}% Eat arguments on the same line, *imperfect*...
	{	\endinput	}
}
\AddToHook{ package / etoolbox / after }%
{	\RenewDocumentCommand\IfFormatAtLeastTF{mmm}% Restore normal functionality.
	{	\@ifl@t@r\fmtversion{#1}{#2}{#3}	}
}
%% Packages and Classes
% from the kernel:
% \def\AtEndOfPackage{%
% \expandafter\g@addto@macro\csname\@currname.\@currext-h@@k\endcsname} 1033 \let\AtEndOfClass\AtEndOfPackage
% \@onlypreamble\AtEndOfPackage
% \@onlypreamble\AtEndOfClass
%
%\ProvideDocumentCommand \AtEndOfPackage	{m}% ...this is not an accurate representation of the actual kernel code
%{	\AddToHookNext{ package/ @currname /after }{ #1 }	}
%\ProvideDocumentCommand \AtEndOfClass	{m}% ...this is not an accurate representation of the actual kernel code
%{	\AddToHookNext{ class/ @currname /after }{ #1 }	}

\ProvideDocumentCommand	\AfterEndOfClass	{omm}%
{	\AddToHook{ class/ #2 /after }[ #1 ]{ #3 }	}
\ProvideDocumentCommand	\AfterEndOfPackage	{omm}%
{	\AddToHook{ package/ #2 /after }[ #1 ]{ #3 }	}
%% Document Environment
\ProvideDocumentCommand \AtEndPreamble	{om}% matches \pkg{etoolbox}
{	\AddToHook{ begindocument/before }[ #1 ]{ #2 }	}
\ProvideDocumentCommand \AtBeginDocument	{om}% matches kernel
{	\AddToHook{ begindocument }[ #1 ]{ #2 }	}
\ProvideDocumentCommand \AfterEndPreamble	{om}% matches \pkg{etoolbox}
{	\AddToHook{ begindocument/end }[ #1 ]{ #2 }	}
\ProvideDocumentCommand	\AfterPreamble	{om}% matches \pkg{etoolbox}, same as \cs{AtBeginDocument}
{	\PackageWarning{ gWmaths }%
	{ \cs{AfterPreamble}~is~*not*~fully~inside~document~body!! }
	\AtBeginDocument[ #1 ]{ #2 }%
%%% \AfterPreamble	% \let\AfterPreamble\AtBeginDocument
}
\ProvideDocumentCommand \AtEndDocument	{om}% matches kernel
{	\AddToHook{ enddocument }[ #1 ]{ #2 }	}
\ProvideDocumentCommand \AfterEndDocument	{om}% matches \pkg{etoolbox}
{	\AddToHook{ enddocument/end }[ #1 ]{ #2 }	}
%% Environments
\ProvideDocumentCommand	\BeforeBeginEnvironment	{omm}%
{	\AddToHook{ env/ #2 /before }[ #1 ]{ #3 }	}
\ProvideDocumentCommand	\AtBeginEnvironment	{omm}%
{	\AddToHook{ env/ #2 /begin }[ #1 ]{ #3 }	}
\ProvideDocumentCommand	\AtEndEnvironment	{omm}%
{	\AddToHook{ env/ #2 /end }[ #1 ]{ #3 }	}
\ProvideDocumentCommand	\AfterEndEnvironment	{omm}%
{	\AddToHook{ env/ #2 /after }[ #1 ]{ #3 }	}
%% Shipouts
\ProvideDocumentCommand	\EveryShipout	{om}% matches \pkg{everyshi}
{	\AddToHook{shipout/before}[#1]{#2}	}
\ProvideDocumentCommand	\AtNextShipout	{om}% matches \pkg{everyshi}
{	\AddToHookNext{shipout/before}[#1]{#2}	}
\disable@package@load{everyshi}{\PackageInfo{gWmaths}{blocked~pkg{everyshi}~from~loading.}}
%    \end{macrocode}
%    \begin{macrocode}
\ProvideDocumentCommand	\AfterGroup	{ooom}%
{	\cs_set:Npn	\l_tmpa_cs	##1##2##3%
	{	\tl_set:Nn	\l_tmpa_tl	{#4}	}
	\exp_args:Neee	\l_tmpa_cs	{#1}{#2}{#3}
	\tl_map_inline:Nn	\l_tmpa_tl	{\group_insert_after:N##1}
}
%    \end{macrocode}
%    \begin{macrocode}
\ProvideDocumentCommand	\AtEndDocumentClass	{o+m}%
{	\AddToHook{documentclass / end}[#1]{#2}	}
\ProvideDocumentCommand	\AfterDocumentClass	{o+m}%
{	\AddToHook{documentclass / after}[#1]{#2}	}
\AtEndOfPackage%
{	\tl_if_in:NnF	\@documentclasshook	{\UseOneTimeHook}%
	{	\g@addto@macro	\@documentclasshook	{\UseOneTimeHook{documentclass/end}}	{}{}% should be \cs{pretocmd}
		\g@addto@macro	\@documentclasshook	{\UseOneTimeHook{documentclass/after}}	{}{}
}	}
\ActivateGenericHook{documentclass / end}
\ActivateGenericHook{documentclass / after}
%    \end{macrocode}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{\pkg{\filename} utilities package}
%
%    \begin{macrocode}
%\makeatletter
%\let\alphalph\@alph
%\let\AlphAlph\@Alph
%\ExplSyntaxOff\makeatletter
%\newcommand{\dontusepackage}[2][]{%
%  \@namedef{ver@#2.sty}{9999/12/31}%
%  \@namedef{opt@#2.sty}{#1}}%
%\@namedef{ver@alphalph.sty}{9999/12/31}%
%\@namedef{opt@alphalph.sty}{}%
%\cs_gset:cpn ver@alphalph.sty {9999/12/31}
%\cs_gset:cpn opt@alphalph.sty {alphalph}
%\expandafter\def\csname ver@alphalph.sty\endcsname{}
%\expandafter\def\csname opt@alphalph.sty\endcsname{}
%\makeatother\ExplSyntaxOn
%\dontusepackage{alphalph}
%
%\ProvidesPackage{alphalph}
%\declare@file@substitution{infwarerr.sty}{gWmaths.sty}
\disable@package@load{infwarerr}{\PackageInfo{gWmaths}{blocked~pkg{infwarerr}~(ho-tex~internals)~from~loading.}}
\cs_gset:cpn{ver@infwarerr.sty}{2010/04/08}%TODO: the version of this package
% TODO: define \cs{ver@infwarerr.sty} to silence warnings
\let\@PackageInfo\PackageInfo
\def\@PackageInfoNoLine#1#2{%
  \PackageInfo{#1}{#2\@gobble}%
}%
\let\@ClassInfo\ClassInfo
\def\@ClassInfoNoLine#1#2{%
  \ClassInfo{#1}{#2\@gobble}%
}%
\let\@PackageWarning\PackageWarning
\let\@PackageWarningNoLine\PackageWarningNoLine
\let\@ClassWarning\ClassWarning
\let\@ClassWarningNoLine\ClassWarningNoLine
\let\@PackageError\PackageError
\let\@ClassError\ClassError
%\declare@file@substitution{everyshi.sty}{everyshi-ltx.sty}
%\disable@package@load {hpackagei} {halternate-codei}
%\csname ver@alphalph.sty\endcsname
%\showpackagesloaded
%\showclassesloaded
%\showfilesloaded
%\makeatother
%
%    \end{macrocode}
%
%
% \begin{macro}{endpart}
%
% Convenience function to \emph{end} a \cs{part}, but without starting another. This is useful for hierarchy breaks like in PDF bookmarks / TOC.
%
%    \begin{macrocode}
\ProvideDocumentCommand\endpart{}%
{	\cs_if_exist:cT{bookmarksetup}%
	{	\bookmarksetup{startatroot}	}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{etc}
%
% Convenience function for \emph{et cetera}, using my preferred historical ligature.
%
%    \begin{macrocode}
%\def\vs.{vs.\spacefactor=\the\sfcode`\v}
%\def\etc.{etc.\spacefactor=\the\sfcode`\c}
\def\etc.{\&c\@ifnextchar{.}{}{.}\spacefactor=\the\sfcode`\c}
\ProvideDocumentCommand{\etcs}{}%
{	\@ifnextchar{.}%
		{\&c}%
		{\&c.\@\xspace}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclareHologo}
%
% This implementation began as the appendix from \href{https://tex.stackexchange.com/a/290504/233148}{Space after LaTeX commands}, reproduced here:
%
%    \begin{macrocode}
\newcommand\requiredelimiter[2][########]%
{%
	\ifdefined#2%
		\def\@temp{\def#2#1}%
		\expandafter\@temp\expandafter{#2}%
	\else%
		\@latex@error{\noexpand#2undefined}\@ehc%
	\fi%
}%
\@onlypreamble\requiredelimiter%
%    \end{macrocode}
%
% Define a function which takes \marg{the name of a logo}, and optionally \oarg{a name to define} instead of the logo's regular name, and defines a control word to expand to the properly typeset logo. Additionally, be clever and require the word to end with an asterisk as a "weird" argument delimiter.
%
%    \begin{macrocode}
\NewDocumentCommand	\DeclareHologo	{ m O{#1} O{*} }
{	%\RequestPackage{hologo}
%    \end{macrocode}
%
% Use \LaTeX3's \cs{cs_gset:cpn} to define a control sequence named \oarg{2}, with a trailing parameter delimiter \meta{/} (without any parameters, just the trailing delimiter), which simply expands through to calling \cs{hologo} with the named logo.
%
%    \begin{macrocode}
	\cs_if_free:cTF {#2}%
	{	\cs_gset_nopar:cpn	{#2} #3	{\hologo{#1}}	}%
	{% If already exists, then renew slightly differently:
		\exp_args:Nc	\RenewDocumentCommand	{#2}	{ s }%
		%% TODO: what if #3 isn't `*'?
		{% from https://tex.stackexchange.com/questions/63568/newdocumentcommand-with-constructed-csname
			\hologo{#1}%
			\IfBooleanF{##1}%
			{%
				\cs_if_exist:cT{xspace}{\xspace}%
}	}	}	}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclareHologos}
%
% Define a function which takes a /list/ of logos to ask \pkg{hologo} for. Specify this as \marg{a single mandatory parameter}, and use \cs{SplitList} (from \pkg{xparse}) to transform it to a list. 
%
%    \begin{macrocode}
\NewDocumentCommand	\DeclareHologos	{ >{\SplitList{,}}m }%
{
	\ProcessList{#1}{\DeclareHologo}%
%    \end{macrocode}
%
% Request \pkg{hologo} to be loaded eventually.
%
%    \begin{macrocode}
	\RequestPackage{hologo}%
}
%    \end{macrocode}
% \end{macro}
%


%
%<*dtx>%%% If we're in the original DTX,
%
% \StopEventually{Further code is badly formatted and needs some DTX-fixage...}
%
%</dtx>
%

%%TODO: MOVE TO CLASS:
% problem is that these are used in the dtx, which doesn't load the class
%
%% Define logos for the \TeX* family, w/ hyp.
% use end-of-class, so nothing is undefined in the document preamble
\AfterDocumentClass{\DeclareHologos%
{
	TeX,
	eTeX,
	hyperTeX,% not defined

	teTeX,
	TeXLive,
	mikTeX,

	pdfTeX,
	XeTeX,
	LuaTeX,

	pdfLaTeX,
	XeLaTeX,
	LuaLaTeX,

	LaTeX,
	LaTeXTeX,
	LaTeX2e,% `2' isn't a letter, so won't function in a command sequence name
	LaTeXe,% \pkg{hologo} interprets this as "LaTeX2e"
	LaTeX3,% `3' isn't a letter, so won't function in a command sequence name

	biber,
	BibLaTeX,% not defined

	NTS,% LOL
}
\DeclareHologo{LaTeX3}[LaTeXx]% Map \hologo{LaTeX3} to \LaTeX3
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% better documentation links from \cls{l3doc} and \pkg{hypdoc}
\ProvideDocumentCommand {\gW@CTAN} { o m }
{ % TODO: switch on #1 for pkg, mirror, TDS
	https://ctan.org/pkg/#2
}
\ProvideDocumentCommand {\CTAN} { o m }
{
	\href{https://ctan.org/tex-archive/#1}{\nolinkurl{CTAN:#1}}%
% example: https://texdoc.net/pkg/hyperref
% example: https://ctan.org/pkg/hyperref
% example: https://ctan.org/tex-archive/macros/latex/contrib/hyperref
% example: https://mirrors.ctan.org/macros/latex/contrib/hyperref/doc/manual.pdf
% example: https://mirrors.ctan.org/install/macros/latex/contrib/hyperref.tds.zip
}
%\RenewDocumentCommand {\pkg} { O{CTAN:} m O{#2} }
%{
%	\href{\gW@CTAN{#3}}{\nolinkurl{#2}}
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fix up \NeedsTeXFormat to work from within \env{document}
\clist_gclear_new:c {g_gWpkgs_clist}
\AfterEndPreamble{%
\ifClassLoadedTF{l3doc}%
{
	\RenewDocumentCommand\NeedsTeXFormat{ m O{\filedate} }
	{ % TODO: change optional arg to check if empty, then fully compute \filedate from \currfilename (so it's fresh with each run)
		\file{\jobname}~requires~\hologo{#1},~dated~#2~or~newer.
	}
	\RenewDocumentCommand\ProvidesExplFile{ m m m m }
	{
		\author{\pkg{#1}
			\thanks{ \url{ https://github.com/gaelicWizard/#1 } }
			~ #3 }
		\date{#2}
		\title{#4}
		\makeatletter
	}
	\RenewDocumentCommand\ProvidesExplPackage{ m m m m }
	{ % \cs_map to \ProvidesExplFile
	}
	\RenewDocumentCommand\ProvidesExplClass{ m m m m }
	{
	}
	\RenewDocumentCommand \RequirePackage { o m o }
	{
		\clist_map_inline:nn {#2}
		{
			\clist_put_right:Nn \g_gWpkgs_clist {##1}
		}
	}
	\RenewDocumentCommand\RequirePackage{ o m o }
	{ % TODO: make \RequirePackage add packages to a list, rather than print
	%% \clist_new:N \g_docinput_clist
		\clist_map_inline:nn {#2}
		{
			\file{\jobname}~requires~\pkg{##1}
			\IfValueT{#3}{,~dated~#3~or~newer}
			.~
		}
	}
}
{}%class loaded l3doc
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{macro}{gW@addGlobalOption}
%
% Prepend specified options to the global options list, as though specified in the optional argument to \cs{documentclass}. Leave the actual document-specified options as last so they may override ours if needed.
%
%    \begin{macrocode}
\NewDocumentCommand\gW@addGlobalOption{ m }
{\clist_map_inline:nn {#1}{
		\clist_gput_left:Nx \@classoptionslist {##1}
}}%
\AtEndPreamble{
	\let\globalClassOptions\@classoptionslist
		}
%    \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{macro}{GetFileInfo}
%
% Define \GetFileInfo %%% Copy/pasta directly from \pkg{doc}
%
%    \begin{macrocode}
\ProvideDocumentCommand\GetFileInfo{m}{%
  \edef\filename{#1}%
  \def\@tempb##1 ##2 ##3\relax##4\relax{%
    \def\filedate{##1}%
    \def\fileversion{##2}%
    \def\fileinfo{##3}}%
  \edef\@tempa{\csname ver@#1\endcsname}%
  \expandafter\@tempb\@tempa\relax? ? \relax\relax}
%    \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{macro}{@docextension, @stripextension}
%
% Define file extension constant to match \@clsextension and \@pkgextension
%
%    \begin{macrocode}
\def\@docextension{drv}%
\def\@stripextension{ins}%
\@onlypreamble\@docextension%
\@onlypreamble\@stripextension%
%    \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %http://www.texfaq.org/FAQ-compjobnam
\def\jobis#1{FF\fi
  \edef\predicate{#1}%
  \edef\predicate{\expandafter\strip@prefix\meaning\predicate}%
  \edef\job{\jobname}%
  \ifx\job\predicate
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Define functions to get lists of classes, packages, files loaded % https://tex.stackexchange.com/a/43568
\seq_new:N \l_pclist_classes_seq
\seq_new:N \l_pclist_packages_seq
\seq_new:N \l_pclist_other_seq
\clist_map_inline:cn { @filelist }
  {
   \tl_if_in:nnTF { #1 } { .cls }
     {
      \tl_set:Nn \l_tmpa_tl { #1 }
      \tl_remove_once:Nn \l_tmpa_tl { .cls }
      \seq_put_right:NV \l_pclist_classes_seq \l_tmpa_tl
     }
     {
      \tl_if_in:nnTF { #1 } { .sty }
       {
        \tl_set:Nn \l_tmpa_tl { #1 }
        \tl_remove_once:Nn \l_tmpa_tl { .sty }
        \seq_put_right:NV \l_pclist_packages_seq \l_tmpa_tl
       }
       {
        \seq_put_right:Nn \l_pclist_other_seq { #1 }
       }
     }
  }
%%
\ProvideDocumentCommand{\ifClassLoadedTF}{ m m m }
{
	\seq_if_in:NnTF \l_pclist_classes_seq { #1 }
	{ %\msg_term:x { The~class~`#1'~is~loaded }
		#2
	}{ %\msg_term:x { The~class~`#1'~is~NOT~loaded }
		#3
	}
}
%%
\ProvideDocumentCommand{\showclassesloaded}{}{\seq_show:N \l_pclist_classes_seq}
\ProvideDocumentCommand{\showpackagesloaded}{}{\seq_show:N \l_pclist_packages_seq}
\ProvideDocumentCommand{\showfilesloaded}{}{\seq_show:N \l_pclist_other_seq}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Define \ifLaTeX3
% \begin{macro}{\ifLaTeXxTF}
% \begin{arguments}
%   \item Code to run if the format is \LaTeX3.
%   \item Code to run if the format is not \LaTeX3.
% \end{arguments}
% Note that this macro is defined in \LaTeX3 syntax, so failure is impossible.
%   \begin{macrocode}
\ProvideDocumentCommand \ifLaTeXxTF { O{} O{} }%
{	\cs_if_exist:cTF {ExplSyntaxOn} {#1} {#2}	}%
%   \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
\ProvideDocumentCommand\email{m}
{
	\href{mailto:#1}{\nolinkurl{#1}}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Hack up loaded package list
% https://tex.stackexchange.com/a/491456
%\expandafter\def\csname ver@l3regex.sty\endcsname{}
\disable@package@load{l3regex}{\PackageInfo{ gWmaths }{ \pkg{l3regex}~is~no~longer~a~separate~package ~and~therefore~need~not~be~loaded. }}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Wrap \pkg{l3docstrip} as \env{l3docstrip}
\ExplSyntaxOff
\NewDocumentEnvironment{gWdocstrip}{ m o +b }
{	%% https://tex.stackexchange.com/a/227179/233148
	\begingroup	\ExplSyntaxOff
	\input l3docstrip

	\ifToplevel{%
		\usedir{tex/latex/\jobname}
		\UseTDS%
		\IfNoValueF{#2}{#2}
		%\askforoverwritefalse
		%\keepsilent%
		\nopreamble
		\nopostamble
	}%
	\def\@docextension{drv}

	\generate{
		\catcode9=12 % tabs %https://tex.stackexchange.com/a/453323
		#3
	}
	%\ifToplevel{%
		%\ReportTotals%
	%}%
	\endgroup
}{}%
\ExplSyntaxOn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{ Orderly Package Loading }
%
% \subsection{ Conditional Package Requirements }
%
% \begin{macro}{RequirePackageBefore, RequirePackageAfter}
%
% Set one package to always load another package immediately before itself. This should not be used for general package ordering, but should only be used when a particular package is absolutely required, but only if the other package is loaded at all. This isn't about ordering; this is a conditional requirement.
%
%    \begin{macrocode}
\AddToHook{package/request}
{%
}{}
\AddToHook{class/beamer/request}[gWpkgs]
{	\DeclarePackageOrdering{hyperref}{after}{beamerbasemodes}[\cls{beamer} loads \pkg{hyperref} halfway through...]
	\DeclarePackageOrdering{hyperref}{after}{beamerbaseoptions}[\cls{beamer} loads \pkg{hyperref} halfway through...]
	\DeclarePackageOrdering{hyperref}{before}{beamerbaserequires}[\cls{beamer} loads \pkg{hyperref} halfway through...]
	\DeclarePackageOrdering{hyperref}{unrelated}{documentclass / after}[\cls{beamer} loads \pkg{hyperref} halfway through...]
	\DeclarePackageOrdering{geometry}{unrelated}{documentclass / after}[\cls{beamer} loads \pkg{hyperref} halfway through...]
}
\AtEndOfPackage%
{	\DeclarePackageOrdering{gWmaths}{before}{ gWpkgs }
	\RequestPackagesAlreadyLoaded{ gWmaths }%
}%
%
\NewDocumentCommand	\RequirePackageBeforePackage	{ o m o m }%
{
	\IfValueT{ #1 }%
	{
		%\PackageInfo{ gWpkgs / RequirePackageBefore }{ Passing~#1~to~#2 }
		\PassOptionsToPackage{ #1 }{ #2 }
	}
	%\PackageInfo{ gWpkgs / RequirePackageBefore }{ Adding~#2~to~package/before/#4 }
	\IfValueTF{ #3 }
	{	\AddToHook{package/ #4 /before}{\RequirePackage{#2}[#3]}	}
	{	\AddToHook{package/ #4 /before}{\RequirePackage{#2}}	}
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequirePackageAfterPackage	{ o m o m }%
{	\IfValueT{ #1 }%
	{
		%\PackageInfo{ gWpkgs / RequirePackageAfter }{ Passing~#1~to~#2 }
		\PassOptionsToPackage{ #1 }{ #2 }
	}
	%\PackageInfo{ gWpkgs / RequirePackageAfter }{ Adding~#4~to~package/after/#2 }
	\IfValueTF{ #3 }
	{	\AddToHook{package/ #4 /after}{	\RequirePackage{#2}[#3]	}	}
	{	\AddToHook{package/ #4 /after}{	\RequirePackage{#2}	}	}
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequirePackageBeforePackageIfPackage	{ m m m o }%
{
	\PackageInfo{ gWpkgs / RequirePackageBeforePackageIfPackage }%
	{ #1 ~when~ #2 ~if~ #3  }
	\AddToHook{package/ #2 /before}%
	{	\@ifpackageloaded{#3}%
		{	\RequirePackage{#1}	}{}
}	}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequirePackageAfterPackageIfPackage	{ m m m o }%
{
	\PackageInfo{ gWpkgs / RequirePackageAfterPackageIfPackage }%
	{ #1 ~when~ #2 ~if~ #3  }
	\AddToHook{package/ #2 /after}%
	{
		\@ifpackageloaded{#3}%
		{	\RequirePackage{#1}	}{}
	}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclarePackagePair}
%
% Set two packages to load each other before and after. 
%
% For example, \pkg{hyperxmp} is specifically an extension for \pkg{hyperref}, and must load before it. Without \pkg{hyperref}, \pkg{hyperxmp} is useless, so \pkg{hyperref} must always be loaded to be useful. Therefore \cs{DeclarePackagePair} sets \pkg{hyperref} to require \pkg{hyperxmp} immediately before it, and also sets \pkg{hyperxmp} to immediately load \pkg{hyperref} once it is. This allows us to ensure both are loaded, in order, even when loaded from within another package, and without having to patch any \LaTeX* internals.
%
%    \begin{macrocode}
\NewDocumentCommand\RequirePackagePair{ o m o m o }
{
	\IfValueT{ #1 }
	{
		%\PackageInfo{ gWpkgs / DeclarePackagePair }{ Passing~#1~to~#2 }
		\PassOptionsToPackage{ #1 }{ #2 }
	}
	
	\IfValueT{ #3 }
	{
		%\PackageInfo{ gWpkgs / DeclarePackagePair }{ Passing~#3~to~#4 }
		\PassOptionsToPackage{ #3 }{ #4 }
	}

	\RequirePackageBeforePackage{#2}{#4}
	\RequirePackageAfterPackage{#4}{#2}

	%% TODO: pass #5 date to #4 (but not #2?)
}
%    \end{macrocode}
%
% \end{macro}
%
% If neither package is loaded elsewhere, then \cs{DeclarePackagePair} don't cause anything else to load.
%
% \subsection{ Package Load Ordering }
%
% Functions for document authors to allow them to focus on the document, not the packages.
%
%    \begin{macrocode}
%    \end{macrocode}
%
% \begin{macro}{RequestPackages,RequestClass}
%
%    \begin{macrocode}
\DeclareDocumentCommand	\PassOptionsToPackages	{ s m m } % TODO: latest kernel (2022-06) modifies \cs{PassOptionsToPackage}, so this should not *re*implement; just pass for each package.
{	\clist_map_inline:nn {#3}% foreach(package)
	{\IfValueT{##1}{% value(package)
		\clist_if_exist:cF	{	opt@ ##1 .sty	}
		{	\clist_new:c	{	opt@ ##1 .sty	}}

		\clist_map_inline:nn {#2}% foreach(option)
		{\IfValueT{####1}{% value(option)
			\cs_if_exist:cTF	{	ver@ ##1 .sty	}% package(loaded)
			{	\IfBooleanTF{#1}% if(star)
				{	\clist_gput_right:cn	{	opt@ ##1 .sty	}{	####1	}
				}{	\PackageWarning	{	##1	}{	Unable~to~pass~options~to~a~package~
										that~has~already~been~loaded...####1 }
				}
			}{	\clist_gput_right:cn	{	opt@ ##1 .sty	}{	####1	}
}	}}	}}	}%
%    \end{macrocode}
%    \begin{macrocode}
%\DeclareDocumentcommand	\RequirePackages	{ o m o }
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequestPackages	{ o m o }
{	\clist_map_inline:nn{ #2 }%
	{\IfValueT{##1}{% value(package)
		\ActivateGenericHook{ package / ##1 / request }%

		\IfValueT{#1}{	\PassOptionsToPackage{ #1 }{ ##1 }	}%
		\cs_if_exist:cTF {	ver@ ##1 .sty	}%
		{	\AddToHook{ gWpkgs }[##1]{\relax}	}
		{	\DeclareHookRule{ gWpkgs }%
				{ ##1 }{after}{ gWmaths }%

			\IfValueTF{#3}%
			{\AddToHook{ gWpkgs }[##1]{	\RequirePackage{##1}[#3]	}}%
			{\AddToHook{ gWpkgs }[##1]{	\RequirePackage{##1}	}}%
		}%

		\UseOneTimeHook{ package / ##1 / request }%
	}	}
	\UseHook{ package / request }
}%
\NewHook{ package / request }
\let\RequestPackage\RequestPackages
%    \end{macrocode}
%    \begin{macrocode}
\AtEndOfPackage%
{	\DeclarePackageOrdering{gWpkgs}{after}{gWmaths}[...]
	\DeclarePackageOrdering{gWpkgs}{before}{documentclass / after}[life is pain]
	\AddToHook { gWpkgs }[ gWpkgs ]%
	{
		\relax%\RequestPackagesAlreadyLoaded{gWpkgs}
	}
	\AddToHook { gWpkgs }[ documentclass / after ]%
	{
		\relax%\RequestPackagesAlreadyLoaded{documentclass / after}
	}

}
\NewDocumentCommand	\RequestClass	{ o m o }
{	\UseHook{ class / request }
	\ActivateGenericHook{ package / #2 / request }
	\ActivateGenericHook{ class / #2 / request }
	\RequestPackagesAlreadyLoaded{ #2 }
	\DeclarePackageOrdering{#2}{after}{gWpkgs}[class loads before nearly all packages]
	%\PassOptionsToClass....
	\AddToHook { gWpkgs }[#2]%
	{%
		\cs_if_exist:cF{ ver@ #2 .cls }%
		{	\def\LoadClass{\@fileswithoptions\@clsextension}
			\LoadClass{#2}[#3]	}
	}
	\DeclarePackageOrdering{#2}{before}{documentclass / after}[class loads before nearly all packages]
	\file_input:n{gWmaths.def}
	\UseOneTimeHook{ class / #2 / request }
	\UseOneTimeHook{ package / #2 / request }
}
\NewHook{ class / request }
%    \end{macrocode}
%
% The checking-if-loaded would be *way* easier if the package loading hooks were one-time hooks...
%
%    \begin{macrocode}
\NewDocumentCommand	\RequestPackageIfPackage	{ o m o m o }
{
	\RequestPackageIfPackageOption [#1] {#2} [#3] {#4} {} [#5]
	%\RequestPackage[#1]{#2}[#3] if #4 has been requested or already loaded, because #5
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequestPackageIfPackageOption	{ o m o m m o }
{
	\gW@ifPackageRequestedWithOptionT {#4}[#5]
	{ \RequestPackages[#1]{#2}[#3] }
	%\RequestPackage[#1]{#2}[#3] if #4 has been requested (or loaded) with option #5, because #6
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToPackageIfPackage	{ m m m o }
{
	\PassOptionsToPackageIfPackageOption {#1} {#2} {#3} {} [#4]
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded), because #4
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToPackageIfPackageOption	{ m m m m o }
{
	\gW@ifPackageRequestedWithOptionT {#3}[#4]
	{ \PassOptionsToPackages{#1}{#2} }
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded) with option #4, because #5
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToClassIfPackage	{ m m m o }
{
	\PassOptionsToClassIfPackageOption {#1} {#2} {#3} {} [#4]
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded), because #4
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToClassIfPackageOption	{ m m m m o }
{
	\gW@ifPackageRequestedWithOptionT {#3}[#4]
	{ \PassOptionsToClass{#1}{#2} }
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded) with option #4, because #5
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclareGlobalOptionsIfPackage	{ m m o }
{
	\DeclareGlobalOptionsIfPackageOption {#1} {#2} {} [#3]
	%\gWaddToGlobal{#1} if #2 requested (or loaded), because #3
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclareGlobalOptionsIfPackageOption	{ m m m o }
{
	\gW@ifPackageRequestedWithOptionT {#2}[#3]
	{ \gW@addGlobalOption{#1} }
	%\gWaddToGlobal{#1} if #2 requested (or loaded) with option #3, because #4
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\gW@ifPackageRequestedWithOptionT	{ m o m }%
{	\clist_map_inline:nn {#1}%
	{	\AddToHook{ package / ##1 / request }%
		{	\tl_if_blank:nTF{#2}%
			{	#3	}%
			{	\clist_if_in:cnT {opt@ ##1 .sty} {#2}%
				{	#3	}
}	}	}	}%
\NewDocumentCommand	\gW_check_packages_loaded	{ s }
{% \cs{RequestPackage} all packages already \cs{RequirePackage}d.
	%\seq_map_inline:Nn \l_pclist_classes_seq {}
	\seq_map_inline:Nn \l_pclist_packages_seq {\RequestPackage{##1}}
}
%    \end{macrocode}
%    \begin{macrocode}
%TODO: \foreach_cls_in_filelist
%TODO: \foreach_sty_in_filelist
%TODO: \foreach_#1_in_filelist
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequestPackagesAlreadyLoaded	{ s m }%
{	%For each package already loaded:
	\clist_map_inline:cn { @filelist }
	{\tl_if_in:nnT { ##1 } { .sty }{
		\tl_set:Nn \l_tmpa_tl { ##1 }
        	\tl_remove_once:Nn \l_tmpa_tl { .sty }
		%\PackageWarning{gWpkgs}{\l_tmpa_tl ~~before~#2}
	% 1 change ordering rule from after to before gWpkgs/before/packages
		\DeclareHookRule{ gWpkgs }%
			{ \l_tmpa_tl }{before}{ #2 }
		\exp_args:NV	\RequestPackage	{\l_tmpa_tl}
	% 2 add ordering rule `before' \cs{LoadPackagesNow}. This should generate errors if any rules conflict.
	}}
	\AddToHook{gWpkgs}[#2]{\relax}
}
\AddToHook{ package / before }%
{	\exp_args:NV	\RequestPackage	{\@currname}
	\AddToHookNext{gWpkgs / before}% TODO: this needs to be expanded or it won't work...
	{	\DeclarePackageOrdering{\@currname}{after}{gWmaths}[try to make sensible hook ordering]	}
}
%
\NewDocumentCommand	\LoadPackagesNow	{ s }
{%TODO: fix up the at-end-preamble version
	\PackageWarning{gWpkgs}{ Loading~Packages~Now }
	\stepcounter{gWpkgs}
	\LogHook{ gWpkgs }%
	\UseHook{ gWpkgs / before }
	\IfBooleanTF{#1}%
	{	\UseOneTimeHook{ gWpkgs }
		\let\LoadPackagesNow\relax
	}%
	{\UseHook{ gWpkgs }}%
	\UseHook{ gWpkgs / after }
	\PackageWarning{gWpkgs}{ Finished~Loading~Packages }
}
\newcounter{gWpkgs}% Calls to \cs{LoadPackagesNow}
\newcounter{gWpkgd}%...
\NewHook{ gWpkgs / before }
\NewHook{ gWpkgs }
\NewHook{ gWpkgs / after }
\AtEndPreamble%
{	\LoadPackagesNow*{}	}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclarePackageOrdering}
%
% \begin{arguments}
%  \item \marg{ package~to~order }
%  \item \marg{ before~or~after }
%  \item \marg{ list~of~other~packages }
%  \item \oarg{ reason~why~ordering }
% \end{arguments}
%
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageOrdering	{ m m m o}
{	\clist_map_inline:nn{ #3 }
	{\tl_if_blank:nF{##1}{
%		\@ifpackageloaded{ ##1 }
%		{
%			\DeclareHookRule{ gWpkgs }
%				{ ##1 }{before}{ gWpkgs \thegWpkgs }
%		}{
%			\DeclareHookRule{ gWpkgs }
%				{ ##1 }{after}{ gWpkgs \thegWpkgs }
%		}
		\DeclareHookRule{ gWpkgs }
			{ #1 }{ #2 }{ ##1 }
	}

	%\DeclareHookRule{ gWpkgs }{ #1 }{before}{ gWpkgs / after / packages	}%
}	}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageDependency	{ s m m o }
{	\IfBooleanF {#1}
	{ % It's possible that a package is required to be loaded, but not necessarily that it be loaded *first*
		\DeclarePackageOrdering{#2}{after}{#3}
	} % For example, \pkg{hyperxmp} requires \pkg{hyperref} in order to function, but can be loaded before or after

	\RequestPackageIfPackage{#3}{#2}[#4]
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageDependencyIfPackage	{ s m >{\SplitList{,}}m m o }
{
	% if #4, then \DeclarePackageDependency#1{#2}{#3}[#5]
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageDependencyIfPackageOption	{ s m >{\SplitList{,}}m m m o }
{
	% if #5 was passed to #4 (and #4 requested/loaded), then \DeclarePackageDependency#1{#2}{#3}[#6]
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%
% \end{macro}
%
%</sty>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*cls>
%%*gWkeys>
% \section{ \cls{ \filename } ~ configuration ~ setup }
%    \begin{macrocode}
\RequirePackage{ gWmaths }
%    \end{macrocode}
%
% \begin{macro}{gWsetup}
%    \begin{macrocode}
\keys_define:nn { gWmaths }
{
%    \end{macrocode}
%
% Set up our options 
%
%    \begin{macrocode}
	DocumentMetadata	.code:n = {%
		\cs_if_exist:NTF \IfDocumentMetadataTF{\IfDocumentMetadataTF%
		{	\DocumentMetadata{#1}	}% Already loaded, just pass along...
		{% MUST be as early as possible, note that we have to even have to hide:
			\cs_if_eq:NNT \documentclass \@twoclasseserror%
			{	\let\documentclass\relax	}
			\DocumentMetadata%
			{%
				pdfversion=1.6,% fucking hack for \pkg{accessibility}
				pdfstandard=A-2u,
				testphase=phase-II,% loads \pkg{tagpdf}, calls \cs{tagpdfsetup{activate,interwordspace,paratagging}}
				#1
			}%
			\ExplSyntaxOn\makeatletter% ...turned off by \cs{DocumentMetadata}???
			\let\documentclass\@twoclasseserror%
		}%
		}{% format too old...
			\pdf_version_min_gset:n {1.6} % fucking hack for \pkg{accessibility}
	}},%
	DocumentMetadata	.initial:n = {},%
%    \end{macrocode}
%    \begin{macrocode}
	format	.code:n = {%
		%%% set up a hook at the right spot to dump a custom format
		\AddToHook{gWpkgs}[format]%
		{	\RemoveFromHook{gWpkgs}[format]% so we don't run again!!
			\RenewDocumentClass% to avoid \@twoclasserror
			%\nonstopmode% don't prompt for user input from here on
			\dump% Output a format file to disk!
			%\endbatchfile% stop our run immediately now.
		}
		\RequestPackagesAlreadyLoaded{ format }%
	},%
%    \end{macrocode}
%    \begin{macrocode}
	PDFencoding .choices:nn = { PDFDocEncoding, unicode, auto }
	{	\tl_set:cn{gW@PDFencoding}{#1}	}	,%
%    \end{macrocode}
%    \begin{macrocode}
	unicode	.choice:	,%
	unicode/ ascii	.meta:n	= {	PDFencoding = PDFDocEncoding	}	,%
	unicide/ ascii	.value_forbidden:n	= true	,%
	unicode/ utf8	.meta:n	= {	PDFencoding = auto	}	,%
	unicide/ utf8	.value_forbidden:n	= true	,%
	unicode/ utf16	.meta:n	= {	PDFencoding = unicode	}	,%
	unicide/ utf16	.value_forbidden:n	= true	,%
	unicode/ pdf	.meta:n	= {	PDFencoding = auto	}	,%
	unicide/ pdf	.value_forbidden:n	= true	,%
	unicode/	.meta:n	= {	PDFencoding = auto	}	,%
	unicide/	.value_forbidden:n	= true	,%
	unicode	.initial:n	= utf8	,%
	utf8	.meta:n	= {	unicode = utf8	}	,%
	utf8	.value_forbidden:n	= true	,%
%    \end{macrocode}
%    \begin{macrocode}
	autodate	.code:n = {	\AfterDocumentClass{ \date{ \filemodprintdate{ \jobname.tex } } }	},%
	autodate	.initial:n = {{}},%
	audodate	.value_forbidden:n = true,%
%    \end{macrocode}
%    \begin{macrocode}
	hyperTeX	.bool_set:N	= \gW@hyperTeX	,
	hyperTeX	.initial:n	= true	,
%    \end{macrocode}
%    \begin{macrocode}
	ntheorem	.code:n	= {
		%% Set up a much nicer set of theorem environments:
		\RequestPackage% `ntheorem`
		[	thmmarks,% enables the automatical placement of endmarks
			thref,% enables the extended reference features
			%standard % load predefined environments
		]{ntheorem}
		\AddToHook{package/ ntheorem /before}% remove \meta{standard}, we do it ourselves
		{	\clist_remove_all:cn	{opt@ntheorem.sty}	{standard}	}
		\AddToHook{package/ ntheorem /after}% specify the standard environments:
		{	\theoremnumbering{arabic}
			\theoremstyle{plain}
			\RequestPackage{latexsym}
			\theoremsymbol{\ensuremath{_\Box}}
			\theorembodyfont{\itshape}
			\theoremheaderfont{\normalfont\bfseries}
			\theoremseparator{}
			\newtheorem{theorem}{\textcolor{green}{Theorem}}[section]
			\let\Theorem\theorem	\let\endTheorem\endtheorem
			\newtheorem{satz}[theorem]{\textcolor{green}{Satz}}
			\let\Satz\satz	\let\endSatz\endsatz
			\newtheorem{proposition}[theorem]{\textcolor{blue}{Proposition}}
			\let\Proposition\proposition	\let\endProposition\endproposition
			\newtheorem{lemma}[theorem]{\textcolor{orange}{Lemma}}
			\let\Lemma\lemma	\let\endLemma\endlemma
			\newtheorem{corollary}{\textcolor{violet}{Corollary}}[theorem]
			\let\Corollary\corollary	\let\endCorollary\endcorollary
			\newtheorem{korollar}[corollary]{\textcolor{violet}{Korollar}}
			\let\Korollar\korollar	\let\endKorollar\endkorollar

			\theorembodyfont{\upshape}
			\newtheorem{example}{Example}[section]
			\let\Example\example	\let\endExample\endexample
			\newtheorem{beispiel}[example]{Beispiel}
			\let\Beispiel\beispiel	\let\endBeispiel\endbeispiel
			\newtheorem{remark}{Remark}[section]
			\let\Remark\remark	\let\endRemark\endremark
			\newtheorem{bemerkung}[remark]{Bemerkung}
			\let\Bemerkung\bemerkung	\let\endBemerkung\endbemerkung
			\newtheorem{anmerkung}[remark]{Anmerkung}
			\let\Anmerkung\anmerkung	\let\endAnmerkung\endanmberkung
			\newtheorem{definition}{\textcolor{red}{Definition}}[section]
			\let\Definition\definition	\let\endDefinition\enddefinition

			\theoremstyle{nonumberplain}
			\theoremheaderfont{\scshape}
			\theorembodyfont{\normalfont}
			\theoremsymbol{\ensuremath{_\blacksquare}}
			\RequestPackage{amssymb}
			\newtheorem{proof}{Proof}[section]
			\let\Proof\proof	\let\endProof\endproof
			\newtheorem{beweis}[proof]{Beweis}
			\let\Beweis\beweis	\let\endBeweis\endbeweis
			\qedsymbol{\ensuremath{_\blacksquare}}
			\theoremclass{LaTeX}
		}
		%
		%% Inform *all* packages that `ntheorem` is in use:
		\DeclareGlobalOptionsIfPackage{ntheorem}{ntheorem}[some packages like to be told if \pkg{ntheorem} is in use]
		\disable@package@load{amsthm}{\PackageInfo{ntheorem}{blocked~pkg{amsthm}~from~loading.}}
		\DeclarePackageOrdering{ ntheorem	}{voids}{	amsthm	}[since disabling load, no need to error]
	},%
	%ntheorem	.initial:n = {},%
	ntheorem	.value_forbidden:n = true,%
%    \end{macrocode}
%    \begin{macrocode}
	amsmath	.code:n	= {%
		%% Set up the most common mathematics package:
		\RequestPackage{amsmath}
		%\RequestPackage{onlyamsmath}% https://ctan.org/pkg/onlyamsmath
		%
		%% Inform *all* packages that `amsmath` is in use:
		\DeclareGlobalOptionsIfPackage{amsmath}{amsmath}[some packages like to be told if \pkg{amsmath} is in use]
		%%
	},%
	%amsmath	.initial:n = {},%
	amsmath	.value_forbidden:n = true,%
%    \end{macrocode}
%    \begin{macrocode}
	hypdoc	.code:n	= {	\RequestPackage{hypdoc}	},%
%    \end{macrocode}
%    \begin{macrocode}
	accessibility	.code:n	= {%
		\RequirePDFTeX
		% This package is the magic that associates, structures, and tags the TeX sources to show up in the PDF:
		\RequestPackage% `accessibility` is badly hacked together and quite old...
		[	tagged,
			highstructure,
		]{accessibility}
	},%

	axessibility	.code:n	= {%
		\PassOptionsToPackageIfPackage{tagpdf}{axessibility}{tagpdf}
		%\PassOptionsToPackages{accsupp}{axessibility}
		\RequestPackage{axessibility}
	},%
%    \end{macrocode}
%    \begin{macrocode}
	videolecture	.bool_set:N	= \gW@videolecture	,
%    \end{macrocode}
%    \begin{macrocode}
	oneinch	.bool_set:N	= \gW@oneinch	,
%    \end{macrocode}
%    \begin{macrocode}
	titlesec	.bool_set:N	= \gW@titlesec	,
%    \end{macrocode}
%    \begin{macrocode}
	venn	.code:n	= {%
		%TODO: load this if \cls{beamer}, since it loads \pkg{pgf}
		%TODO: detect \pkg{pgf} and default this on?
		\RequestPackage{
			venndiagram,	%https://tex.stackexchange.com/a/381249
		}	},%
%    \end{macrocode}
%    \begin{macrocode}
	documentClass	.code = {%\tl_const:Nx
		\tl_set:Nx	\gW@documentClass	{#1}
		%\keys_define:nn{gWmaths}{documentClass .value_forbidden:n = true}
	},%
	documentClass	.initial:n	= article	,	% .default vs .initial-value
	documentClass	.value_required:n	= true	,
	syllabus	.meta:n	= {
		documentClass	= article	,
			}	,
	syllabus	.value_forbidden:n	= true	,
	exam	.meta:n	= {
		documentClass	= exam	,
			}	,
	exam	.value_forbidden:n	= true	,
	lecture	.meta:n	= {
		documentClass	= article	,
			}	,
	lecture	.value_forbidden:n	= true	,
	course	.meta:n	= {
		documentClass	= report	,
			}	,
	course	.value_forbidden:n	= true	,
	quiz	.meta:n	= {
		documentClass	= article	,
			}	,
	quiz	.value_forbidden:n	= true	,
	handout	.meta:n	= {
		documentClass	= article	,
			}	,
	handout	.value_forbidden:n	= true	,
	dtx	.meta:n = {
		documentClass	= l3doc	,
			}	,
	dtx	.value_forbidden:n	= true	,
%    \end{macrocode}
%    \begin{macrocode}
	unknown	.code:n	= {
		%\msg_error:nnx { gWmaths }
		%{ unknown-key } { \l_keys_key_tl }
			}	,
%    \end{macrocode}
%    \begin{macrocode}
}%
\NewDocumentCommand \gWsetup { s m }%
{	\keys_set:nn { gWmaths } { #2 }	}
%    \end{macrocode}
% \end{macro}
%%/gWkeys>
% \section{ \cls{ \filename } ~ document ~ class }
%
\AddToHook{package/ hyperref-generic /before}%
{	\disable@package@load{etoolbox}{\PackageInfo{gWmaths}{blocked~pkg{etoolbox}~from~loading.}}	}
\AddToHook{package/ hyperref-generic /after}%
{	\reenable@package@load{etoolbox}	}
\AtEndDocumentClass%
{	\LoadPackagesNow{}	}%
\GetFileInfo{\CurrentFile}%
%
% \begin{macro}{gWsetup}
%
% Set our default options
%
%    \begin{macrocode}
\gWsetup
{
	ntheorem,
	%venn,% requires \pkg{pgf}
	amsmath,
}
\AddToHook{ gWpkgs}[format]{\relax}
%
%    \end{macrocode}
%    \begin{macrocode}
%
\ifdefined\ProcessKeyOptions
	\ProcessKeyOptions[gWmaths]
\else	% name change for slightly-altered code after a decade with no package...
	\RequirePackage{l3keys2e}
	\ProcessKeysOptions{gWmaths}
\fi
%
%\DeclareOption*{\PassOptionsToClass{\CurrentOption}{\gW@documentClass}}
%\ProcessOptions\relax
%    \end{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Prepare arguments for all the packages
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Set up modern defaults for encodings:
%
%    \begin{macrocode}
\PassOptionsToPackages{% \pkg{cmap}
	resetfonts,% Clear any already-loaded fonts and reload
}{cmap}% maps font glyphs back to unicode characters (allows copy/pasta from PDF).
\PassOptionsToPackages{% `mmap`
	noTeX,% use unicode codepoints, not \TeX* names, [2008/08/11]
}{mmap}% \pkg{mmap} extends \pkg{cmap} with math mappings.
%    \end{macrocode}
%
\PassOptionsToPackages{% \pkg{url}
	obeyspaces,% allow spaces in URLs, but be wary of backslashes 
	hyphens,% allow line-breaks to happen in an *already* hyphenated URL
	lowtilde,% always use math tilde \cs{sim}
}{url}% \pkg{hyperref} loads \pkg{url} and then patches it
%
\PassOptionsToPackages{% \pkg{showkeys}
	color,% allow labels to be colored by defining \meta{color}s
	notref,% do not redefine \cs{ref} and \cs{pageref} (\pkg{varioref})
	notcite,% do not redefine \cs{cite} et al (\pkg{natbib}
}{showkeys}% print \cs{label} name in margin or superscript
%
\PassOptionsToPackages{% \pkg{varioref}
	nospace,% documented as being required because the default from 2001 was wrong...but compatibility...
}{varioref}% \cs{vref} adds text indicating document location
%
%\ifdraft{
%\PassOptionsToPackages{%
%	draft
%}{bookmark}%TODO: replace this with just a damn \DeclareOption
%}{}% \ifdraft
%
\PassOptionsToPackages{% \pkg{bookmark} for \pkg{hyperref}
	atend,% define \cs{BookmarksAtEnd} 
	%color=anyshit,% PDFv1.4+
}{bookmark}
%
\PassOptionsToPackages{% \pkg{backref}
	%hyperref,% already global option? Also, \pkg{hyperref} loads \pkg{backref} if \meta{backref} passed to it.
	hyperpageref,% \pkg{hyperref} loads \pkg{backref} if \meta{pagebackref} passed to it
}{backref}
%
%% Set up \HyperTeX* (hyperref, et al), which is basically the structural core of the document:
\bool_if:nT \gW@hyperTeX
{
	\AddToHook{ class / beamer / before }%
	{% Choose violence over \cls{beamer}.
	%TODO: *check* if implicit=true before forcing it here
		\AddToHook{ package / hyperref / before }%
		{	\PassOptionsToPackage{	implicit,	}{hyperref}	}
	}

	\PassOptionsToPackages
	{	%implicit, % Redefine \LaTeX* internals, already default
		hypertexnames, % Use guessable names for anchors, already default
		%hyperfigures, % make figures hyper links
		hyperfootnotes, % set up hyperlinked footnotes, already default
	 	hyperindex, % links index entries back to main text, conflicts with hypdoc, already default
	}{hyperref}
}% \@gWhyperTeX

\PassOptionsToPackages{% ...it's always PDF...
	pdfusetitle,% use \title{} for PDF metadata
	pdfdisplaydoctitle,% set PDF display \title{} in UI title bar
	pdfpagelabels,% tag pages with page numbers from \LaTeX* ("ii" or whatever)
}{hyperref}

\RequestPackage[% `hyperref`
	colorlinks, % set hyperlinks in color
	linkcolor=blue, % default is fucking 'red'
	linktoc=all, % link section name *and* page number from toc
	backref, % link back from bib entries to main text
]{hyperref}
%% Inform *all* packages that `hyperref` is in use:
%\gW@addGlobalOption{hyperref}
%
\PassOptionsToPackages{bookmarks}{hyperref}% Write TOC as PDF bookmarks
\RequestPackageIfPackageOption{bookmark}{hyperref}{bookmarks}%
	[\pkg{bookmark} replaces \pkg{hyperref}'s PDF bookmarks implementation]%
\PassOptionsToPackageIfPackage{bookmarks}{hyperref}{bookmark}%
	[\pkg{bookmark} replaces \pkg{hyperref}'s PDF bookmarks implementation]%
%
\PassOptionsToPackageIfPackage%
{hyperref}{xcolor}{hyperref}[color expressions by defining additional keys]%
%
%
\AddToHook{ package / hyperxmp / after }%
{%
	\PassOptionsToPackage{keeppdfinfo}{hyperref}% Make sure this is in the options string
	\AddToHook{ package / hyperref / after }{%
		\hypersetup{%
			keeppdfinfo=true,% `hyperxmp` strips Author and Keywords by default; don't do that.
	}}%
}%
%
%% Set up `scrbase` not to argue with iftex.
\PassOptionsToPackageIfPackage% KOMA-Script base package
{internalonly}{scrbase}{iftex}[don't define macros to conflict with `iftex`]


%

%
%% Use colors now that we have color printers and video screens...
\RequestPackage[% `xcolor`
	xcdraw, % use PS/PDF commands to draw frames and boxes, in dvips, pdftex, dvipdfm
	fixinclude, % prevents dvips from explicitly resetting current color to black before actually inserting an .eps file
	%fixpdftex % Load the `pdfcolmk` package; useless stub
	dvipsnames, % Load a set of predefined colors according to \TeX*.
	svgnames, % Load a set of predefined colors according to SVG 1.1.
	x11names*, % Load a set of predefined colors according to Unix/X11, delayed.
	table, % Load the `colortbl` package
]{xcolor}
%


%

%
%% Set up formatting for telephone numbers:
\RequestPackage[% `phonenumbers`
	country=US, % switch defaults from DE to US. % TODO: get current locale, instead of hardcoding.
	foreign=international, % Use sensible defaults for full ITU numbers.
	home-country=none, % Do not strip the country code (default).
	home-area-code=none, % Do *not* strip area code, ever (default).
	link=on % clickable tel: link (default).
]{phonenumbers}

%
%% Set up a nicer quotation package:
\RequestPackage[% `csquotes`
	autostyle=try,% use `babel` if available
	%autopunct,% look ahead for trailing punctuation to move inside marks
	strict=true,% turn warnings to errors
]{csquotes}

%
%% Fix paragraph spacing: don't indent, do separate paragraphs.
\RequestPackage{parskip} % Doesn't work with \cls{beamer}...maybe just loaded too late?

\RequestPackage% sub-package of \pkg{currfile}
	{currfile-abspath}
\DeclarePackageOrdering{currfile-abspath}{after}{currfile}% temp..
\AddToHook{package/ currfile-abspath /after}% Read \file{\jobname.fls} to determine absolute path to main document.
	{	\getmainfile	}
%\providecommand\currfile@mainext{tex}

%\RequestPackage[% `currfile`
%	abspath, %-recorder (default in latexmk)
%	realmainfile,
%	parent,
%	%parents,
%]{currfile}[2020/09/29]



\PassOptionsToClass{% `beamer`
	t % do not center everything
}{beamer}




\PassOptionsToPackages{% `babel`
		provide*=*,% Load the locale, not just the language.
		provide@=*,% something something EXPERIMENTAL
		}{babel}
\ifLuaTeX%
	\PassOptionsToPackage{bidi=basic}{babel}
\else
	%\PassOptionsToPackage{bidi=default}{babel}
\fi
\AddToHook{package/ babel /after}
{	\babeladjust% automatically load locales
	{
		autoload.bcp47 = on,% Enable auto-load of language by locale name.
		autoload.bcp47.options = import,% Load the INI directly.
		bcp47.toname = on,% When loaded by LDF, also allow selection by locale name.
	}
	\babelprovide[import=en-US, language=Default, main]{american}
	\ifLuaTeX\babelprovide[import, onchar=ids fonts]{hebrew}
	\else\babelprovide[import]{hebrew}\fi
	\ifXeTeX\RequestPackage[Latin,Hebrew,Cyrillics]{ucharclasses}\fi
	%% TODO: check if main language is not Nil, then \write18 "locale" and parse out LANG(LC_*"), then \babelprovide[import=$LANG,main{default}...!
	%% TODO: add to global class options the friendly name of the language, e.g. for \pkg{varioref}
	\AddToHook{package/ ucharclasses /after}%
	{	\setTransitionTo{Hebrew}%
			{\begin{otherlanguage*}[date,captions]{hebrew}}
		\setTransitionFrom{Hebrew}%
			{\end{otherlanguage*}}
		\setTransitionsForCyrillics%
			{\begin{otherlanguage*}[date,captions]{ukrainian}}%
			{\end{otherlanguage*}}
	}
}


\RequestPackage[%
	%heightrounded % round off to avoid overfull alrgn;earujs
]{geometry}



\PassOptionsToPackages
{ % Documentation expressly states that \TUTeX* should use \meta{pdfencoding=unicode}
	pdfencoding=\gW@PDFencoding,	% set 'auto' to prefer PDFDocEncoding over UTF-16.
}{hyperref}



%\let\@classoptionslist\gW@classoptionslist
% ref: https://www.overleaf.com/learn/latex/Writing_your_own_class
% ref: https://www.latex-project.org/help/documentation/clsguide.pdf

\bool_if:nTF \gW@videolecture%
{%
	%\gWsetup{documentClass = beamer}
	%\geometry{landscape, papersize={4in,5in}, margin=4ex}
	\NewDocumentEnvironment	{slide}	{}%
	{	\clearpage	}{	\clearpage	}
	\AddToHook{ class / beamer / after }%
	{	\RenewDocumentEnvironment	{slide}	{}%
		{	\group_end:\begin{frame}	}{	\end{frame}\group_begin:	}
	}
}{%
	\NewDocumentEnvironment	{slide}	{}%
	{		}{		}
}

%declare option for setting margin to 1"
%\bool_if:nTF \gW@oneinch{}{}


% The \LaTeXe* way:
%\newif\ifgW@myoption% create a flag for this option
%\DeclareOption{someoption}{\gW@myoptiontrue}% if the option is set, then raise the flag



\ifLuaTeX
	%\RequirePackage{pdftexcmds}
\fi

\sys_if_output_pdf:T{
	%\pdf_version_min_gset:n {1.6} % see \cs{DocumentMetadata}
	\DeclarePackageOrdering{cmap}{unrelated}{hyperref}[by using \cs{pdfminorversion} here, we obviate the ordering dependency]
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load the base document class
\PassOptionsToClass{notitlepage}{\gW@documentClass}
\RequestClass	{\gW@documentClass}%
%%
\RequestPackage{regexpatch}% ...see \pkg{regexpatch}...
%\ShowHook{documentclass}
\AfterDocumentClass%
{	\ProvideDocumentCommand	\subtitle	{m}%
	{	\@namedef{@subtitle}{#1}	}%
	\subtitle{}{}{}% default is blank
	% Patch \cs{@maketitle} to add a smaller subtitle after the main title, while keeping \cs{@title} clean.
	\xpatchcmd{\@maketitle}{{\LARGE \@title \par}}{{\LARGE \@title \par}{\Large \@subtitle \par}}{}{}%
	\xapptocmd{\maketitlehookb}{\par {\centering\Large \@subtitle \par}}{}{}%
	% Patch \cs{title}, \cs{author}, \cs{date} to be non-global.
	\xpatchcmd{\title}{\gdef\@title}{\def\@title}{}{}%
	\xpatchcmd{\subtitle}{\gdef\@subtitle}{\def\@subtitle}{}{}%
	\xpatchcmd{\author}{\gdef\@author}{\def\@author}{}{}%
	\xpatchcmd{\date}{\gdef\@date}{\def\@date}{}{}%
}%
\NewDocumentCommand	\maketitlingpage	{}%
{%
	\begin{titlingpage}%
	\maketitle%
	\end{titlingpage}%
}%
%%
%\RequestPackage[v1]{subfiles}%
\NewDocumentCommand	\RenewDocumentClass	{}%
{	\RenewDocumentCommand	\documentclass	{omo}%
	{	\tl_if_eq:nnTF{##2}{gWmaths}{\gWsetup{##1}}{\@twoclasseserror}
		\UseHook{ gWpkgs }
		\let\documentclass\@twoclasseserror
		\UseHook{documentclass / after}
		%\use:n	\@documentclasshook
}	}
%\NewHook{documentclass}
\AddToHook{include/before}%
{	\begingroup % Keep (most) assignments local to the sub-document, not global.
	\RenewDocumentClass%
	\RenewDocumentEnvironment{document}{}% s
	{}% This automatically starts *another* group, while also shadowing the global `document' environment.
	{
		\aftergroup\endinput % Ensure that anything after \cs{end}\arg{document} is discarded.
		\ignorespacesafterend % Avoid extra spaces after \cs{end}\arg{document}.
	}
	\AddToHookNext{file/before}%
	{	\ExplSyntaxOff\makeatother% Start the incoming document with normal catcodes.
		\cs_set:cpn{@partaux}{}% Allow nested \cs{include}
}	}%
\AddToHook{include/after}{\endgroup}
\AfterDocumentClass%
{	\xpatchcmd{\@include}{\write\@mainaux{\string\@input{#1.aux}}}{\write\@auxout{\string\@input{#1.aux}}}{}{}
}%
%TODO: make \cs{include} nestable...

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Begin actually loading packages
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% See https://github.com/mhelvens/latex-pkgloader/blob/master/pkgloader-recommended.sty
%%
\RequestPackage{
	babel, % No discernible performance impact for just always loading.
	hyperxmp, % babel cannot set the pdf-lang option for hyperref, but it can through hyperxmp!

	%amsfonts,
	%amssymb,
	%amsmath,
	%mathtools,
%%don't use: http://mirrors.ctan.org/macros/latex/required/amscls/doc/amsthdoc.pdf
}

\RequestPackage% Use real subscripts/superscripts from OTF fonts, when available.
	{realscripts}

%\RequestPackage% Allow including external files encapsulated in the resulting PDF.
%	{embedfile}
%\RequestPackage% \pkg{embedall} does the automagic using file hooks
%	[notall]%FIXME: make sure this loads at the right time, double-check options, &c.
%	{embedall}

\bool_if:nT \gW@oneinch{
	\AfterDocumentClass{
		\geometry{
			%letterpaper, % screen % TODO: try to get this to auto-detect or something so \documentclass[a4paper,landscape]{gWmaths} works
			margin=1in
				}
			}
}%\gW@oneinch

%\ifgW@myoption % if the flag is set, then do some thing
%   code active only for this option
%\fi

%\DeclarePackageOrdering{ graphicx }{before}{ fontspec }
\RequestPackage{graphicx}
	% docs say to only load one, and package/classes should  `s' not `x' as the user may s->x but not back
	% literally the only difference is the `keyval' package, therefore just use `x'.
	% ...and `x' loads `s'...

% https://tex.stackexchange.com/a/12468/233148
\AddToHook{ package / graphicx / after }%
{%
	\setkeys{Gin}{keepaspectratio}
		% Instruct \pkg{graphicx} to maintain the aspect ration of all imported graphics.

	% https://tex.stackexchange.com/a/86355/233148
	\def\maxwidth#1{\ifdim\Gin@nat@width>#1 #1\else\Gin@nat@width\fi}
	\def\maxheight#1{\ifdim\Gin@nat@height>#1 #1\else\Gin@nat@height\fi}
	\def\textheightlesscaption{\dimexpr\textheight-4\baselineskip-\abovecaptionskip-\belowcaptionskip\relax}
	% Determine if the image is too wide for the page.
	\setkeys{Gin}{width=\maxwidth{\linewidth}, height=\maxheight{\textheightlesscaption}}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All documents are UTF-8 in the 21st century. If not, fix your document.
% When using older engines, this tells the engine to read all files as UTF-8.
% \XeTeX* and \LuaTeX* always read UTF-8 and ignore this package.
% \LaTeX* circa 2018 and newer default to UTF-8 as well.
%    \begin{macrocode}
\gW@addGlobalOption{utf8}%
\RequestPackage[utf8]{inputenc}[2015/01/01]%
\AddToHook{package/ inputenc /before}% Enforce UTF-8 *only*.
{	\cs_set:cpn	{opt@inputenc.sty}	{utf8}	}
\tracinglostchars=3 % codepoints missing characters are *errors*!
%    \end{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\ifTUTeX % "Unicode \TeX*" matches \LuaTeX* and/or \XeTeX*
	% engine is unicode-native, so drop \pkg{inputenc} entirely and add \pkg{fontspec} for \pkg{fontenc}
	\disable@package@load{inputenc}{\PackageInfo{gWmaths}{blocked~pkg{inputenc}~from~loading.}}
	\RequestPackage{fontspec} % Handle modern fonts
	\PassOptionsToPackages{TU}{fontenc} % FIXME: somehow i'm loading this twice somewhere...
	\AddToHook{package/ fontspec /after}% Make ASCII nicer; see \href{https://tex.stackexchange.com/a/577364/233148}
	{	\defaultfontfeatures{Ligatures={Required,Common,TeX,Discretionary}}	}
	\RequestPackage{unicode-math} % Use unicode symbols, basically \pkg{mmap}.
	
	%% Post-2017, don't use EU1/EU2 font encoding (nor T1, nor TS1, nor OT1)
	\AddToHook{package/ fontenc /before}% Enforce TU-encoding *only*.
	{	\tl_set:cn	{opt@fontenc.sty}	{TU}	}
	\AddToHook{package/ fontenc /after}%
	{	\tl_set:cv	{ver@fontenc.sty}	{ver@@fontenc.sty}	}
	%% Post-2017, don't use xunicode package
	\disable@package@load{xunicode}{\PackageInfo{gWmaths}{blocked~pkg{xunicode}~from~loading.}}
	%% Post-2017, default `tuenc` package uses TU font encoding, full unicode.

	\sys_if_engine_luatex:F% Don't load \pkg{luacode} if we're not in \LuaTeX*.
	{	\disable@package@load{luacode}{\PackageInfo{gWmaths}{blocked~pkg{luacode}~(not~luatex.}}	}
\else \RequirePDFTeX % don't even with others
	\PassOptionsToPackages{% `fontenc`
		T1,% T1 fonts extend the old OT1 format to allow greater than 128 characters
	}{fontenc}

	\disable@package@load{fontspec}{\PackageInfo{gWmaths}{blocked~pkg{fontspec}~from~loading.}}

	\RequestPackage{%
		%mmap,
		cmap,
		fontenc,	% `fontenc` specifies which font format to import.
			}%
	% T1 fonts extend the old OT1 format to allow greater than 128 characters
	% `mmap` is `cmap` plus some math-specifics.
	% `cmap` extends default character mapping to include unicode codepoints.
	% something about ASCII or Unicode fonts: ...Package[noTeX]{mmap}
\fi%\ifTUTeX



%https://tex.stackexchange.com/a/5231



% \subsection{Required Packages}
%
% These packages are either required for some of our features, or are just really nice to have set up:
%\RequestPackage{fancyhdr}%


\AddToHook{class/ beamer /after}{
	\disable@package@load{paralist}{\PackageInfo{beamer}{blocked~pkg{paralist}~from~loading.}}
	\disable@package@load{enumitem}{\PackageInfo{beamer}{blocked~pkg{enumitem}~from~loading.}}
	\disable@package@load{titling}{\PackageInfo{beamer}{blocked~pkg{titling}~from~loading.}}
}%\gW@videolecture

\RequestPackage{paralist} % `paralist` redefines {itemize}, {enumerate} environments
%\RequestPackage[ % `enumitem` redefines {itemize}, {enumerate} environments
	% `enumitem` is substantially more complex than `paralist`
	%shortlabels, % compatible with `enumerate`
	%unboxed % avoid problems nesting environments
	%]{enumitem}
\RequestPackage{titling}% un-dumb \maketitle % see \pkg{titlesec}; incompatible w/ Beamer


%\RequestPackage% `pdfpages` improves inserting PDF clippings over graphicx
%	{pdfpages} % http://mirrors.ctan.org/macros/latex/contrib/pdfpages/pdfpages.pdf

\RequestPackage%
{	xcolor,
	phonenumbers,
	csquotes,
	geometry,
	filemod,
}%


%% tocloft: http://mirrors.ctan.org/macros/latex/contrib/tocloft/tocloft.pdf

%% titlesec: http://mirrors.ctan.org/macros/latex/contrib/titlesec/titlesec.pdf % too complex


\RequestPackage% `hyperref` claims to be about hypertext, but it actually controls the structure of the PDF!
{	%% NOTE: https://tex.stackexchange.com/q/1863
	hyperref,
	bookmark, % replaces \pkg{hyperref}'s PDF TOC implementation
	backref, % auto-loaded by \pkg{hyperref} already
	nameref, % not auto-loaded by \pkg{hyperref} despite being part of the bundle...
		% \pkg{nameref} patches a bunch of shit, including \pkg{titlesec, beamer, varioref, ifthen, listings}
}% %also: http://mirrors.ctan.org/macros/latex/contrib/hyperref/doc/manual.html#x1-520009


%\RequestPackage[
	%linewidth = 1 % TODO: what is `linewidth` for?
		%]{pdfcomment}

%hack for some releases of \TeXLive* which disable auto-detection
%\ifXeTeX\geometry{xetex}\fi%
%\ifLuaTeX\geometry{luatex}\fi%


% \begin{macro}{gitinfo2}
% \pkg{gitinfo2} loads several other packages, including \pkg{xstring} and \pkg{xcolor}, so throw it at the end for now.
%    \begin{macrocode}
\RequestPackage{gitinfo2}%
%    \end{macrocode}
%\end{macro}

\AtBeginDocument%
{%
	\listfiles % track loaded files in this job
	\hypersetup%
	{%
		pdfrendition=default, %screen,
		%pdfsubject={},
		%pdfsubtitle={},
		%pdfurl={}, % full path to *this* PDF
		pdfcreationdate={\file_timestamp:n{\jobname.tex}},%
		%pdfinfo={%
			%CreationDate={\tex_filemoddate:D{\jobname.tex}}
		%}
		%pdfsource={\jobname.tex} % default
		pdfuapart=1, % that's the whole point, but we're lacking...
	}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% preserve document metadata...
\AtEndPreamble%
{
	\let\doctitle\@title
	\let\docauthor\@author
	%\let\docthanks\@thanks % this is bjorked due to missing macros
	\let\docdate\@date
}
\AfterDocumentClass% should be in the main file, still processing line 1.
{	\cs_if_exist:NTF	\themainfile%
	{	\file_get_full_name:nN{\themainfile}	\CurrentFile	}
	{	\file_get_full_name:nN{\c_sys_jobname_str}	\CurrentFile	}

	\file_parse_full_name:VNNN \CurrentFile \CurrentFilePath \CurrentFileName \CurrentFileExt
}
\AfterEndPreamble% *inside* main document environment
{	\GetFileInfo{\CurrentFile}
	\tl_if_blank:nF	\fileinfo%
	{	\hypersetup%
		{	pdfsubject={\fileinfo},
}	}	}




\providecommand*{\q}[2][]{\blockquote[#1][]{#2}}
	% Short-hand for quotes via `csquotes`
	% TODO: \blockcquote
	% \providencommand can't more than one optional argument...
	%% ref: https://tex.stackexchange.com/a/29975
	%% ref: https://www.overleaf.com/learn/latex/Commands
	%% ref: https://tex.stackexchange.com/questions/321435/newcommand-and-renewcommand-difficulty-in-class-file
	%% ref: https://stackoverflow.com/questions/1812214/latex-optional-arguments
	%% ref: https://tex.stackexchange.com/a/1057
	

\AtBeginDocument%
{	\hologoSetup{break=false}	}%


\RequestPackage{layouts}%
\providecommand{\drawlayouts}%
{
	\drawdimensionstrue
	\printinunitsof{in}
	\pagediagram   % draws diagram with all layout vernacular identified (except bottom margin)
	\pagevalues
	\currentpage
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parts, Chapters, Sections, Subsections, Subsubsections, Paragraphs, Subparagraphs
%%
% https://www.overleaf.com/learn/latex/sections_and_chapters
% https://en.wikibooks.org/wiki/LaTeX/Document_Structure#Sectioning_commands
%%

\AfterDocumentClass%
{	\cs_if_exist:cF{thechapter}%
	{	\cs_if_exist:cT{thepart}%
		{	\newcounter{chapter}%[part]
			\counterwithin{section}{chapter}%
		}%
}	}%
% Set our header depth to maximum 1:
\setcounter{secnumdepth}{1} % '3' is default, and numbers to subsubsections not paragraphs
\setcounter{tocdepth}{2} % number to subsection, not subsubsection
%
\NewDocumentCommand	\setchapter	{m O{#3} m O{#3}}%
{% https://tex.stackexchange.com/a/530817/233148
	% if #1 equals \thechapter, then assume that \maketitle will output...
	% Otherwise, assume that the *whole* document is this chapter
	\setcounter{chapter}{#1}% Set our chapter number as specified.
	\phantomsection% Tell \HyperTeX* to handle references appropriately here:
	%\addcontentsline{toc}{chapter}{\thechapter\hspace{1em}#2}% Add to the table fo contents.
	\addcontentsline{toc}{chapter}{\numberline{\thechapter}#2}% Add to the table fo contents.
	\ProvideDocumentCommand\thechaptermark{}{ #4 } %TODO?
}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\AddToHook{class/ beamer /after}%
{	\setbeamertemplate{theorem begin}%
	{	\par\vskip\medskipamount%
		\begin{beamercolorbox}[colsep*=.75ex]{block title}
			\usebeamerfont*{block title}%
			\inserttheoremname
			\ifx\inserttheoremaddition\empty\else\ (\inserttheoremaddition)\fi%
		\end{beamercolorbox}%
		{\parskip0pt\par}%
		\ifbeamercolorempty[bg]{block title}
		{}
		{\ifbeamercolorempty[bg]{block body}{}{\nointerlineskip\vskip-0.5pt}}%
		\usebeamerfont{block body}%
		\vskip-.25ex\vbox{}%
	}
	\setbeamertemplate{theorem end}{}

	\ProvideDocumentCommand	\theorembreak	{}%
	{	\usebeamertemplate{theorem end}
		\framebreak
		\usebeamertemplate{theorem begin}
}	}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%







%\addto\captionsenglish{%
%	\renewcommand{\abstractname}{What To Expect}% Heading of Intro section
%}








%% from https://tex.stackexchange.com/a/514184/233148
\RequestPackage{tabstackengine,xcolor,fancybox,graphicx}
\AddToHook{package/ fancybox /after}%
{\AddToHook{package/ tabstackengine /after}%
{	\NewDocumentCommand	\blackcard	{mm}%
	{{	\cornersize{.1}\fboxsep=0pt\relax	%% Mind the group
		\Ovalbox{\tabbedCenterstack{%
		\makebox[0pt][l]{\scriptsize$#2$} && \\
			&\makebox[22pt]{#1}&\\
			&&\makebox[0pt][r]{\rotatebox[origin=c]{180}{\scriptsize$#2$}}}}%
	}}

	\NewDocumentCommand	\redcard	{mm}%
	{{	\cornersize{.1}\fboxsep=0pt\relax	%% Mind the group
		\Ovalbox{\color{red}\tabbedCenterstack{%
		\makebox[0pt][l]{\scriptsize$#2$} && \\
			&\makebox[22pt]{#1}&\\
			&&\makebox[0pt][r]{\rotatebox[origin=c]{180}{\scriptsize$#2$}}}}%
	}}

	\NewDocumentCommand	\jokerface	{}%
	{	\raisebox{-2pt}{\kern-1pt\stackengine{0pt}{%
			\stackinset{c}{1pt}{c}{-.4pt}{\stackunder[.7pt]{$\cdot\kern2pt\cdot\kern0.3pt$}%
			{--}}{$\bigcirc$}}{\,$\steaming$}{O}{c}{F}{F}{S}}
	}
	\NewDocumentCommand	\joker	{}%
	{	\vcenter{\hbox{\scalebox{.4}{ \tiny JOKER }}}	}

	\NewDocumentCommand \AllTheCards {}
	{{	\leavevmode\par\centering	%% Mind the group
		\clist_map_inline:nn { A,2,3,4,5,6,7,8,9,10,J,Q,K }
		{	\blackcard{##1}{\spadesuit}	}
		\par
		\clist_map_inline:nn { A,2,3,4,5,6,7,8,9,10,J,Q,K }
		{	\redcard{##1}{\varheartsuit}	}
		\par
		\clist_map_inline:nn { A,2,3,4,5,6,7,8,9,10,J,Q,K }
		{	\blackcard{##1}{\clubsuit}	}
		\par
		\clist_map_inline:nn { A,2,3,4,5,6,7,8,9,10,J,Q,K }
		{	\redcard{##1}{\vardiamondsuit}	}
		\par
	}}%
	%\blackcard{Q}{\spadesuit}
	%\redcard{10}{\varheartsuit}
	%\redcard{A}{\vardiamondsuit}
	%\blackcard{\jokerface}{\joker} %% Joker is broken...
}	}%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Begin user defined commands

\providecommand{\map}[1]{\xrightarrow{#1}}

\providecommand{\bc}{\mathbb C}
\providecommand{\bF}{\mathbb F}
\providecommand{\bH}{\mathbb H}
\providecommand{\bn}{\mathbb N}
\providecommand{\bz}{\mathbb Z}
\providecommand{\bp}{\mathbb{P}}
\providecommand{\bq}{\mathbb Q}
\providecommand{\br}{\mathbb R}


\providecommand{\zbar}{\overline{\mathbb{Z}}}
\providecommand{\qbar}{\overline{\mathbb{Q}}}

\providecommand{\la}{\langle}
\providecommand{\ra}{\rangle}
\providecommand{\lra}{\longrightarrow}
\providecommand{\hra}{\hookrightarrow}
\providecommand{\bs}{\backslash}

\providecommand{\al}{\alpha}
\providecommand{\be}{\beta}

\AtEndPreamble{
	\DeclareMathOperator{\Aut}{Aut}
	\DeclareMathOperator{\Aff}{Aff}
	\DeclareMathOperator{\End}{End}
	\DeclareMathOperator{\Hom}{Hom}
	\DeclareMathOperator{\im}{im}
}
%\renewcommand{\labelenumi}{(\alphalph{enumi})}

\ProvideDocumentCommand	\blankpage	{}%
{	\clearpage%
	\thispagestyle{empty}%
	\addtocounter{page}{-1}%
	\null%
	\clearpage%
}

%  End user defined commands
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These establish different environments for stating Theorems, Lemmas, Remarks, etc.
\AddToHook{package/ ntheorem /after}%%https://tex.stackexchange.com/a/340458/233148
{
	\theorembodyfont{\upshape}
	\newtheorem{Exercise}{\textcolor{brown}{Exercise}}
	\newenvironment{Solution}{\noindent{\it Solution.}}{}
	%$ TODO: prepend \cs{pagebreak}\oarg{2} to \cs{endExercise} and \cs{endSolution}

%% TODO: switch this to alter \setparms@definition -> \theorem@headerfont rather than the name...but that will color the number too..?
	%\xpatchcmd{\setparams@definition}{\def \theorem@headerfont }{\def \theorem@headerfont#1\ }%
	%{	\xpatchcmd{\setparams@definition}{\}\def \theorem@separator \{}{ \textcolor{red}{#1}\ \}\def \theorem@separator \{}	{}{}	}	{}
	\xpatchcmd{\setparms@definition}{\csname th@plain\endcsname}{\th@plain}%
	{}{}
}

% End environments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% https://tex.stackexchange.com/questions/108696/what-do-explsyntaxon-and-explsyntaxoff-do

\ExplSyntaxOff

\begin{filecontents*}{latexmkrc}
# This file _MUST NOT_ have any file extension; just `latexmkrc`.
# This file forces XeLaTeX when used with LaTeXmk as invoked by TeXShop.
$pdf_mode = 5;
$dvi_mode = $postscript_mode = 0;
push @extra_xelatex_options, "-8bit";
push @extra_xelatex_options, $TSUserCompileOptions;
\end{filecontents*}
 %% git update-index --assume-unchanged from https://stackoverflow.com/a/10755704
 %% BUT WAIT: https://stackoverflow.com/a/13631525
 %% git update-index --skip-worktree gWmaths.cls gWmaths.sty README.md gWmaths.drv
 %% ctanify --pkgname=gWmaths --tdsonly='*.sty' --tdsonly='*.cls' gWmaths.{dtx,pdf} *.{sty,cls,txt,tex,def}
%</cls>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*ins>
\begin{filecontents*}{.git/hooks/post-commit}
#!/bin/sh
# Copyright 2015 Brent Longborough
# Part of gitinfo2 package Version 2
# Release 2.0.7 2015-11-22
# Please read gitinfo2.pdf for licencing and other details
# -----------------------------------------------------
# Post-{commit,checkout,merge} hook for the gitinfo2 package
#
# Get the first tag found in the history from the current HEAD
FIRSTTAG=$(git describe --tags --always --dirty='-*' 2>/dev/null)
# Get the first tag in history that looks like a Release
RELTAG=$(git describe --tags --long --always --dirty='-*' --match '[0-9]*.*' 2>/dev/null)
# Hoover up the metadata
git --no-pager log -1 --date=short --decorate=short \
    --pretty=format:"\usepackage[%
        shash={%h},
        lhash={%H},
        authname={%an},
        authemail={%ae},
        authsdate={%ad},
        authidate={%ai},
        authudate={%at},
        commname={%cn},
        commemail={%ce},
        commsdate={%cd},
        commidate={%ci},
        commudate={%ct},
        refnames={%d},
        firsttagdescribe={$FIRSTTAG},
        reltag={$RELTAG}
    ]{gitexinfo}" HEAD > .git/gitHeadInfo.gin
\end{filecontents*}
%</ins>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<dtx>\Finale% \cls{l3doc}, \pkg{doc}, \cs{\StopEventually}
