%<*!README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\NeedsTeXFormat{LaTeX2e}[2020/10/01]	\RequirePackage{ l3keys2e, etoolbox,	}%
%<cls>\ProvidesExplClass%
%<sty>\ProvidesExplPackage%
%<*!sty&!cls>
\ProvidesExplFile%
%</!sty&!cls>
 	{gWmaths}	{2021/02/13}	{0.5.0}%
		{COVID-19 Quarantine Accessible \TeX* Project}%
%<*dtx>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\ifcsundef{DocInput}{%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%!TEX encoding = UTF-8
%%!TEX root = gWmaths.dtx
%%!TEX spellcheck = en-US
%!TeX program = pdflatexmk
%!BIB program = biber
%!TEX parameter = -8bit
% -interaction=nonstopmode
%--enable-8bit-chars
%-interaction=batchmode
}{%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{abstract}
%</dtx>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%</!README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*dtx|README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
A DTX file is parsed as a whole multiple times from within itself through multiple different parsers. Additionally, portions are extracted to entirely separate files, which are then imported during parsing of the DTX itself such that some lines are processed multiple times during a single parse (of many parses). Programmers believe in a form of ritual hazing called `recursion', and the ability to construct a working DTX is somewhat of a rite of passage before being allowed to publish a \LaTeX* package. Consider this my proof of qualification.
%
During the great pandemic of 2020, the \cls{gWmaths} class was created to shorten the common preamble from a set of my wife's \LaTeXe* lectures, transparencies, slides, and handouts. It was initially \cls{pellmaths} and was just a shortcut for 80 lines of boilerplate at the top of every darn file.
%
With the first week of 2021 declaring "hold my beer", some effort was made to expand and improve. The class was renamed to \cls{gWmaths.cls}, partially split out to a \pkg{gWmaths.sty} package, and updated to \LaTeXx*. Meanwhile, the source transformed to require build via \pkg{docstrip} and was brought under version control.
%
This work has the LPPL maintenance status `maintained'.
%
The Current Maintainer of this work is 
%<dtx>\author{
John Pell
%<dtx>\thanks{\url{https://github.com/gaelicWizard/\filename}}}
.
%
The list of all files belonging to `gWmaths' is given in the file `manifest.txt'.
% \end{abstract}
}%
%</dtx|README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*!README>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*ins>
% \section{Installer job file}	\label{ins}
%
% \begin{macro}{l3docstrip}
%
% The ASCII character 9 (tab) becomes |^^I| in \XeTeX*, unless \meta{-8bit} is passed on the command line.
%
% Begin a \TeX* group so the unprotected input doesn't jack up too much stuff, then input \LaTeXx*'s edition of \pkg{docstrip}.
%
%    \begin{macrocode}
\begingroup	\ExplSyntaxOff	\input l3docstrip
%    \end{macrocode}
%
% Set our build defaults, define the file extension for our documentation driver, and set `tab' category code to character (instead of space) so it makes it through to the stripped files.
%
%    \begin{macrocode}
\ifToplevel{%
	\askforoverwritefalse	%\keepsilent	%
	\usedir{tex/latex/\jobname}	\UseTDS	%
	\nopreamble	\nopostamble	}%
\def\@docextension{drv}	\def\@stripextension{ins}%
%    \end{macrocode}
%
% \begin{macro}{generate,file}
%
% For each of \file{README}, \file{ins}, \file{sty}, \file{cls}, \file{drv}
%  ask \pkg{l3docstrip} to generate the distributables.
%
%    \begin{macrocode}
\generate{	\catcode9=12 % tabs %https://tex.stackexchange.com/a/453323
  \file{README.txt}{\from{\jobname.dtx}{README}}
  %\filename@parse{\jobname.ins} % https://tex.stackexchange.com/a/39636 https://tex.stackexchange.com/a/39647
  %\file{\filename@base.\filename@ext}{\from{\filename@base.dtx}{\filename@ext}}
  \file{\jobname.\@stripextension}{\from{\jobname.dtx}{\@stripextension}}
  \file{\jobname.\@pkgextension}{\from{\jobname.dtx}{\@pkgextension}}
  \file{\jobname.\@clsextension}{\from{\jobname.dtx}{\@clsextension}}
  \file{\jobname.\@docextension}{\from{\jobname.dtx}{\@docextension}}
%    \end{macrocode}
%
% \begin{macro}{ReportTotals}
%
% Print some stats to the terminal, then \cs{endgroup} to escape from \pkg{l3docstrip}.
%
%    \begin{macrocode}
}	\ifToplevel{	\ReportTotals
%
%<ins>\endbatchfile
}	\endgroup	% \end{l3docstrip}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%</ins>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\RequirePackage{ iftex, ifmtarg, currfile,	}%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*drv>
% \section{ Documentation driver file }
%
% Load \LaTeXx*'s documentation class, load ourselves (utility package), set the document title \etc., then \cs{DocInput} this very file.
%
%    \begin{macrocode}
\documentclass{l3doc}
\usepackage{gWmaths}

%\EnableCrossrefs % Say \DisableCrossrefs if index is ready
\CodelineIndex % \vs. \PageIndex
\RecordChanges % Gather update information
\OnlyDescription % comment out for implementation details

\setlength\hfuzz{15pt}	% dont make so many
\hbadness=7000		% over and under full box warnings

\GetFileInfo{\jobname}
	\title{\fileinfo}
	\date{\filedate}
	\author{\pkg{\filename}
		\thanks{ \url{ https://github.com/gaelicWizard/\filename } } ~
		~ \fileversion }

\AtEndPreamble{\ExplSyntaxOff}
\begin{document}
	\maketitle

\begingroup	\catcode`\<=\catcode`\%
	\ExplSyntaxOn
	%\clist_map_inline:cn {g_gWpkgs_clist} {\file{\jobname}~requires~\pkg{#1}. }
	%\file{\jobname}~requires~the~following~packages:~\clist_use:cn {g_gWpkgs_clist}{,~}.
	%\clist_show:c {g_gWpkgs_clist}
	\ExplSyntaxOff%
	%\part{\jobname.dtx}%

%\DescribeMacro{\DescribeMacro} % \vs. \begin{macro}{\DescribeMacro}
%\DescribeEnv{scontents}

	\DocInput{\jobname.dtx}%
	%\IndexInput{}%
	%\endpart%{\jobname.dtx}%
	%\IndexInput{}
	%\MakeShortVerb{\<}
	%\PrintChanges
	%\PrintIndex
\endgroup
\end{document}
%    \end{macrocode}
%</drv>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*sty>
%
% \section{ \pkg{\filename} utilities package }
%
%    \begin{macrocode}
%\makeatletter
%\let\alphalph\@alph
%\let\AlphAlph\@Alph
%\ExplSyntaxOff\makeatletter
%\newcommand{\dontusepackage}[2][]{%
%  \@namedef{ver@#2.sty}{9999/12/31}%
%  \@namedef{opt@#2.sty}{#1}}%
%\@namedef{ver@alphalph.sty}{9999/12/31}%
%\@namedef{opt@alphalph.sty}{}%
%\cs_gset:cpn ver@alphalph.sty {9999/12/31}
%\cs_gset:cpn opt@alphalph.sty {alphalph}
%\expandafter\def\csname ver@alphalph.sty\endcsname{}
%\expandafter\def\csname opt@alphalph.sty\endcsname{}
%\makeatother\ExplSyntaxOn
%\dontusepackage{alphalph}
%
%\ProvidesPackage{alphalph}
%\declare@file@substitution{infwarerr.sty}{gWmaths.sty}
\disable@package@load{infwarerr}{\PackageInfo{gWmaths}{blocked~pkg{infwarerr}~(ho-tex~internals)~from~loading.}}
% TODO: define \cs{ver@infwarerr.sty} to silence warnings
\let\@PackageInfo\PackageInfo
\def\@PackageInfoNoLine#1#2{%
  \PackageInfo{#1}{#2\@gobble}%
}%
\let\@ClassInfo\ClassInfo
\def\@ClassInfoNoLine#1#2{%
  \ClassInfo{#1}{#2\@gobble}%
}%
\let\@PackageWarning\PackageWarning
\let\@PackageWarningNoLine\PackageWarningNoLine
\let\@ClassWarning\ClassWarning
\let\@ClassWarningNoLine\ClassWarningNoLine
\let\@PackageError\PackageError
\let\@ClassError\ClassError
%\declare@file@substitution{everyshi.sty}{everyshi-ltx.sty}
%\disable@package@load {hpackagei} {halternate-codei}
%\csname ver@alphalph.sty\endcsname
%\showpackagesloaded
%\showclassesloaded
%\showfilesloaded
%\makeatother
%
%    \end{macrocode}
%
%
% \begin{macro}{endpart}
%
% Convenience function to \emph{end} a \cs{part}, but without starting another. This is useful for hierarchy breaks like in PDF bookmarks / TOC.
%
%    \begin{macrocode}
\ProvideDocumentCommand\endpart{}%
{%
	\ifdefined\bookmarksetup%
		\bookmarksetup{startatroot}%
	\fi%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{etc}
%
% Convenience function for \emph{et cetera}, using my preferred historical ligature.
%
%    \begin{macrocode}
%\def\vs.{vs.\spacefactor=\the\sfcode`\v}
%\def\etc.{etc.\spacefactor=\the\sfcode`\c}
\def\etc.{\&c\@ifnextchar{.}{}{.}\spacefactor=\the\sfcode`\c}
\ProvideDocumentCommand{\etcs}{}%
{%
	\@ifnextchar{.}%
		{\&c}%
		{\&c.\@\xspace}%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclareHologo}
%
% This implementation began as the appendix from \href{https://tex.stackexchange.com/a/290504/233148}{Space after LaTeX commands}, reproduced here:
%
%    \begin{macrocode}
\newcommand\requiredelimiter[2][########]%
{%
	\ifdefined#2%
		\def\@temp{\def#2#1}%
		\expandafter\@temp\expandafter{#2}%
	\else%
		\@latex@error{\noexpand#2undefined}\@ehc%
	\fi%
}%
\@onlypreamble\requiredelimiter%
%    \end{macrocode}
%
% Define a function which takes \marg{the name of a logo}, and optionally \oarg{a name to define} instead of the logo's regular name, and defines a control word to expand to the properly typeset logo. Additionally, be clever and require the word to end with an asterisk as a "weird" argument delimiter.
%
%    \begin{macrocode}
\NewDocumentCommand	\DeclareHologo	{ m O{#1} O{*} }
{	%\RequestPackage{hologo}
%    \end{macrocode}
%
% Use \LaTeXx*'s \cs{cs_gset:cpn} to define a control sequence named \oarg{2}, with a trailing parameter delimiter \meta{/} (without any parameters, just the trailing delimiter), which simply expands through to calling \cs{hologo} with the named logo.
%
%    \begin{macrocode} 
	\cs_gset:cpn	{#2} #3	{\hologo{#1}}
%    \end{macrocode}
%    \ uninteresting
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclareHologos}
%
% Define a function which takes a /list/ of logos to ask \pkg{hologo} for. Specify this as \marg{a single mandatory parameter}, and use \cs{SplitList} (from \pkg{xparse}) to transform it to a list. 
%
%    \begin{macrocode}
\NewDocumentCommand	\DeclareHologos	{>{\SplitList{,}}m}
{
%    \end{macrocode}
%
% Use \cs{ProcessList} to pass each item from the parameter list to \cs{DeclareHologo}.
%
%    \begin{macrocode}
	\ProcessList{#1}{\DeclareHologo}%
%    \end{macrocode}
%
% Request \pkg{hologo} to be loaded eventually.
%
%    \begin{macrocode}
	\RequestPackage{hologo}%
}
%    \end{macrocode}
% \end{macro}
%


%
% \StopEventually{END OF LINE} % must put \Finale at the bottom
%<*dtx>%%% If we're in the original DTX,
%% \endinput% then stop all further processing.
%</dtx>
%

%%TODO: MOVE TO CLASS:
% problem is that these are used in the dtx, which doesn't load the class
%
%% Define logos for the \TeX* family, w/ hyp.
% use end-of-class, so nothing is undefined in the document preamble
\AtEndOfClass{\DeclareHologos
{
	%TeX,
	eTeX,
	hyperTeX, % not defined

	teTeX,
	TeXLive,
	mikTeX,

	pdfTeX,
	XeTeX,
	LuaTeX,

	pdfLaTeX,
	XeLaTeX,
	LuaLaTeX,

	%LaTeX,
	LaTeXTeX,
	LaTeX2e, % `2' isn't a letter, so won't function in a command sequence name
	LaTeXe, % \pkg{hologo} interprets this as "LaTeX2e"
	LaTeX3, % `3' isn't a letter, so won't function in a command sequence name

	biber,
	BibLaTeX, % not defined

	NTS, % LOL
}
\DeclareHologo{LaTeX3}[LaTeXx] % Map \hologo{LaTeX3} to \LaTeXx*
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% better documentation links from \cls{l3doc} and \pkg{hypdoc}
\ProvideDocumentCommand {\gW@CTAN} { o m }
{ % TODO: switch on #1 for pkg, mirror, TDS
	https://ctan.org/pkg/#2
}
\ProvideDocumentCommand {\CTAN} { o m }
{
	\href{https://ctan.org/tex-archive/#1}{\nolinkurl{CTAN:#1}}%
% example: https://texdoc.net/pkg/hyperref
% example: https://ctan.org/pkg/hyperref
% example: https://ctan.org/tex-archive/macros/latex/contrib/hyperref
% example: https://mirrors.ctan.org/macros/latex/contrib/hyperref/doc/manual.pdf
% example: https://mirrors.ctan.org/install/macros/latex/contrib/hyperref.tds.zip
}
%\RenewDocumentCommand {\pkg} { O{CTAN:} m O{#2} }
%{
%	\href{\gW@CTAN{#3}}{\nolinkurl{#2}}
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fix up \NeedsTeXFormat to work from within \env{document}
\clist_gclear_new:c {g_gWpkgs_clist}
\AfterEndPreamble{%
\ifClassLoadedTF{l3doc}%
{
	\RenewDocumentCommand\NeedsTeXFormat{ m O{\filedate} }
	{ % TODO: change optional arg to check if empty, then fully compute \filedate from \currfilename (so it's fresh with each run)
		\file{\jobname}~requires~\hologo{#1},~dated~#2~or~newer.
	}
	\RenewDocumentCommand\ProvidesExplFile{ m m m m }
	{
		\author{\pkg{#1}
			\thanks{ \url{ https://github.com/gaelicWizard/#1 } }
			~ #3 }
		\date{#2}
		\title{#4}
	}
	\RenewDocumentCommand\ProvidesExplPackage{ m m m m }
	{ % \cs_map to \ProvidesExplFile
	}
	\RenewDocumentCommand\ProvidesExplClass{ m m m m }
	{
	}
	\RenewDocumentCommand \RequirePackage { o m o }
	{
		\clist_map_inline:nn {#2}
		{
			\clist_put_right:Nn \g_gWpkgs_clist {##1}
		}
	}
	\RenewDocumentCommand\RequirePackage{ o m o }
	{ % TODO: make \RequirePackage add packages to a list, rather than print
	%% \clist_new:N \g_docinput_clist
		\clist_map_inline:nn {#2}
		{
			\file{\jobname}~requires~\pkg{##1}
			\IfValueT{#3}{,~dated~#3~or~newer}
			.~
		}
	}
}
{}%class loaded l3doc
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{macro}{gW@addGlobalOption}
%
% Prepend specified options to the global options list, as though specified in the optional argument to \cs{documentclass}. Leave the actual document-specified options as last so they may override ours if needed.
%
%    \begin{macrocode}
\NewDocumentCommand\gW@addGlobalOption{ m }
{\clist_map_inline:nn {#1}{
		\clist_gput_left:Nx \@classoptionslist {##1}
}}%
\AtEndPreamble{
	\let\globalClassOptions\@classoptionslist
		}
%    \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{macro}{GetFileInfo}
%
% Define \GetFileInfo %%% Copy/pasta directly from \pkg{doc}
%
%    \begin{macrocode}
\ProvideDocumentCommand\GetFileInfo{m}{%
  \edef\filename{#1}%
  \def\@tempb##1 ##2 ##3\relax##4\relax{%
    \def\filedate{##1}%
    \def\fileversion{##2}%
    \def\fileinfo{##3}}%
  \edef\@tempa{\csname ver@#1\endcsname}%
  \expandafter\@tempb\@tempa\relax? ? \relax\relax}
%    \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \begin{macro}{@docextension, @stripextension}
%
% Define file extension constant to match \@clsextension and \@pkgextension
%
%    \begin{macrocode}
\def\@docextension{drv}%
\def\@stripextension{ins}%
\@onlypreamble\@docextension%
\@onlypreamble\@stripextension%
%    \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %http://www.texfaq.org/FAQ-compjobnam
\def\jobis#1{FF\fi
  \edef\predicate{#1}%
  \edef\predicate{\expandafter\strip@prefix\meaning\predicate}%
  \edef\job{\jobname}%
  \ifx\job\predicate
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Define functions to get lists of classes, packages, files loaded % https://tex.stackexchange.com/a/43568
\seq_new:N \l_pclist_classes_seq
\seq_new:N \l_pclist_packages_seq
\seq_new:N \l_pclist_other_seq
\clist_map_inline:cn { @filelist }
  {
   \tl_if_in:nnTF { #1 } { .cls }
     {
      \tl_set:Nn \l_tmpa_tl { #1 }
      \tl_remove_once:Nn \l_tmpa_tl { .cls }
      \seq_put_right:NV \l_pclist_classes_seq \l_tmpa_tl
     }
     {
      \tl_if_in:nnTF { #1 } { .sty }
       {
        \tl_set:Nn \l_tmpa_tl { #1 }
        \tl_remove_once:Nn \l_tmpa_tl { .sty }
        \seq_put_right:NV \l_pclist_packages_seq \l_tmpa_tl
       }
       {
        \seq_put_right:Nn \l_pclist_other_seq { #1 }
       }
     }
  }
%%
\ProvideDocumentCommand{\ifClassLoadedTF}{ m m m }
{
	\seq_if_in:NnTF \l_pclist_classes_seq { #1 }
	{ %\msg_term:x { The~class~`#1'~is~loaded }
		#2
	}{ %\msg_term:x { The~class~`#1'~is~NOT~loaded }
		#3
	}
}
%%
\ProvideDocumentCommand{\showclassesloaded}{}{\seq_show:N \l_pclist_classes_seq}
\ProvideDocumentCommand{\showpackagesloaded}{}{\seq_show:N \l_pclist_packages_seq}
\ProvideDocumentCommand{\showfilesloaded}{}{\seq_show:N \l_pclist_other_seq}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Define \ifLaTeX3
% \begin{macro}{\ifLaTeXxTF}
% \begin{arguments}
%   \item Code to run if the format is \LaTeXx*.
%   \item Code to run if the format is not \LaTeXx*.
% \end{arguments}
% Note that this macro is defined in \LaTeXx* syntax, so failure is impossible.
%   \begin{macrocode}
\ProvideDocumentCommand \ifLaTeXxTF { O{} O{} }
{
	\ifcsdef {ExplSyntaxOn} {#1} {#2}
}
%   \end{macrocode}
% \end{macro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
\ProvideDocumentCommand\email{m}
{
	\href{mailto:#1}{\nolinkurl{#1}}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Hack up loaded package list
% https://tex.stackexchange.com/a/491456
%\expandafter\def\csname ver@l3regex.sty\endcsname{}
\disable@package@load{l3regex}{\PackageInfo{ gWmaths }{ \pkg{l3regex}~is~no~longer~a~spearate~package ~and~therefore~need~not~be~loaded. }}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Wrap \pkg{l3docstrip} as \env{l3docstrip}
\ExplSyntaxOff
\NewDocumentEnvironment{gWdocstrip}{ m o +b }
{	%% https://tex.stackexchange.com/a/227179/233148
	\begingroup	\ExplSyntaxOff
	\input l3docstrip

	\ifToplevel{%
		\usedir{tex/latex/\jobname}
		\UseTDS%
		\IfNoValueF{#2}{#2}
		%\askforoverwritefalse
		%\keepsilent%
		\nopreamble
		\nopostamble
	}%
	\def\@docextension{drv}

	\generate{
		\catcode9=12 % tabs %https://tex.stackexchange.com/a/453323
		#3
	}
	%\ifToplevel{%
		%\ReportTotals%
	%}%
	\endgroup
}{}%
\ExplSyntaxOn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{ Orderly Package Loading }
%
% \subsection{ Conditional Package Requirements }
%
% \begin{macro}{RequirePackageBefore, RequirePackageAfter}
%
% Set one package to always load another package immediately before itself. This should not be used for general package ordering, but should only be used when a particular package is absolutely required, but only if the other package is loaded at all. This isn't about ordering; this is a conditional requirement.
%
%    \begin{macrocode}
\NewDocumentCommand\RequirePackageBeforePackage{ o m o m }
{
	\IfValueT{ #1 }
	{
		%\PackageInfo{ gWpkgs / RequirePackageBefore }{ Passing~#1~to~#2 }
		\PassOptionsToPackage{ #1 }{ #2 }
	}
	%\PackageInfo{ gWpkgs / RequirePackageBefore }{ Adding~#2~to~package/before/#4 }
	\IfValueTF{ #3 }
	{	\AddToHook{package/before/#4}{\RequirePackage{#2}[#3]}	}
	{	\AddToHook{package/before/#4}{\RequirePackage{#2}}	}
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand\RequirePackageAfterPackage{ o m o m }
{
	\IfValueT{ #1 }
	{
		%\PackageInfo{ gWpkgs / RequirePackageAfter }{ Passing~#1~to~#2 }
		\PassOptionsToPackage{ #1 }{ #2 }
	}
	%\PackageInfo{ gWpkgs / RequirePackageAfter }{ Adding~#4~to~package/after/#2 }
	\IfValueTF{ #3 }
	{	\AddToHook{package/after/#4}{	\RequirePackage{#2}[#3]	}	}
	{	\AddToHook{package/after/#4}{	\RequirePackage{#2}	}	}
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand\RequirePackageBeforePackageIfPackage{ m m m o }
{
	\PackageInfo{ gWpkgs / RequirePackageBeforePackageIfPackage }
	{ #1 ~when~ #2 ~if~ #3  }
	\AddToHook{package/before/#2}
	{
		\@ifpackageloaded{#3}
		{	\RequirePackage{#1}	}
	}
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand\RequirePackageAfterPackageIfPackage{ m m m o }
{
	\PackageInfo{ gWpkgs / RequirePackageAfterPackageIfPackage }
	{ #1 ~when~ #2 ~if~ #3  }
	\AddToHook{package/after/#2}
	{
		\@ifpackageloaded{#3}
		{	\RequirePackage{#1}	}
	}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclarePackagePair}
%
% Set two packages to load each other before and after. 
%
% For example, \pkg{hyperxmp} is specifically an extension for \pkg{hyperref}, and must load before it. Without \pkg{hyperref}, \pkg{hyperxmp} is useless, so \pkg{hyperref} must always be loaded to be useful. Therefore \cs{DeclarePackagePair} sets \pkg{hyperref} to require \pkg{hyperxmp} immediately before it, and also sets \pkg{hyperxmp} to immediately load \pkg{hyperref} once it is. This allows us to ensure both are loaded, in order, even when loaded from within another package, and without having to patch any \LaTeX* internals.
%
%    \begin{macrocode}
\NewDocumentCommand\RequirePackagePair{ o m o m o }
{
	\IfValueT{ #1 }
	{
		%\PackageInfo{ gWpkgs / DeclarePackagePair }{ Passing~#1~to~#2 }
		\PassOptionsToPackage{ #1 }{ #2 }
	}
	
	\IfValueT{ #3 }
	{
		%\PackageInfo{ gWpkgs / DeclarePackagePair }{ Passing~#3~to~#4 }
		\PassOptionsToPackage{ #3 }{ #4 }
	}

	\RequirePackageBeforePackage{#2}{#4}
	\RequirePackageAfterPackage{#4}{#2}

	%% TODO: pass #5 date to #4 (but not #2?)
}
%    \end{macrocode}
%
% \end{macro}
%
% If neither package is loaded elsewhere, then \cs{DeclarePackagePair} don't cause anything else to load.
%
% \subsection{ Package Load Ordering }
%
% Functions for document authors to allow them to focus on the document, not the packages.
%
%    \begin{macrocode}
\NewHook{ gWpkgs / Load Packages Now }
\NewHook{ gWpkgs / Request Packages }
\NewHook{ gWpkgs / Request Package }
\NewHook{ gWpkgs / Request Class }
%    \end{macrocode}
%
% \begin{macro}{RequestPackage,LoadPackagesNow}
%
%    \begin{macrocode}
\NewDocumentCommand	\RequestPackages	{ o m o }
{
	\UseHook{ gWpkgs / Request Packages }

	\clist_map_inline:nn{ #2 }
	{
		\RequestOnePackage[#1]{##1}[#3]
	}
}
\let\RequestPackage\RequestPackages
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequestClass	{ o m o }
{
	\UseHook{ gWpkgs / Request Class }
	\NewHook{ gWpkgs / Request Class / #2 }

	\DeclarePackageOrdering{#2}{before}{gWpkgs / Class Loaded}[class loads before `early']
	\AddToHook { gWpkgs / Load Packages Now }[#2]
	{\ifcsdef{ver@#2.cls}{}{%\showclassesloaded
		\LoadClass{#2}
	}}%
	\DeclarePackageOrdering{#2}{after}{gWpkgs / Before Class}[class loads after `gWpkgs / Before Class']

	\UseOneTimeHook{ gWpkgs / Request Class / #2 }
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequestOnePackage	{ o m o }
{
	\IfValueTF{#2}
	{	\hook_if_exist:nF {gWpkgs / Request Package / #2}%
		{	\NewHook{ gWpkgs / Request Package / #2 }	}%

		\@ifpackageloaded{ #2 }%
		{%
			\DeclareHookRule{ gWpkgs / Load Packages Now }%
				{ #2 }{before}{ gWpkgs / Load Packages Begin }%
		}{%
			\DeclareHookRule{ gWpkgs / Load Packages Now }%
				{ #2 }{after}{ gWpkgs / Load Packages Begin }%

			\IfValueT{#1}%
			{	\PassOptionsToPackage{ #1 }{ #2 }	}%
		}%

		\IfValueTF{#3}%
		{\AddToHook{ gWpkgs / Load Packages Now }[#2]{	\RequirePackage{#2}[#3]	}}%
		{\AddToHook{ gWpkgs / Load Packages Now }[#2]{	\RequirePackage{#2}	}}%

		\UseOneTimeHook{ gWpkgs / Request Package / #2 }%
	}{%
		\PackageWarning{ gWpkgs }{ Empty~arg~2:~#2 }%
	}%
}
%    \end{macrocode}
%
% The checking-if-loaded would be *way* easier if the package loading hooks were one-time hooks...
%
%    \begin{macrocode}
\NewDocumentCommand	\RequestPackageIfPackage	{ o m o m o }
{
	\RequestPackageIfPackageOption [#1] {#2} [#3] {#4} {} [#5]
	%\RequestPackage[#1]{#2}[#3] if #4 has been requested or already loaded, because #5
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\RequestPackageIfPackageOption	{ o m o m m o }
{
	\gW@ifPackageRequestedWithOptionT {#4}[#5]
	{ \RequestPackage[#1]{#2}[#3] }
	%\RequestPackage[#1]{#2}[#3] if #4 has been requested (or loaded) with option #5, because #6
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToPackageIfPackage	{ m m m o }
{
	\PassOptionsToPackageIfPackageOption {#1} {#2} {#3} {} [#4]
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded), because #4
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToPackageIfPackageOption	{ m m m m o }
{
	\gW@ifPackageRequestedWithOptionT {#3}[#4]
	{ \PassOptionsToPackage{#1}{#2} }
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded) with option #4, because #5
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToClassIfPackage	{ m m m o }
{
	\PassOptionsToClassIfPackageOption {#1} {#2} {#3} {} [#4]
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded), because #4
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\PassOptionsToClassIfPackageOption	{ m m m m o }
{
	\gW@ifPackageRequestedWithOptionT {#3}[#4]
	{ \PassOptionsToClass{#1}{#2} }
	%\PassOptionToPackage{#1}{#2} if #3 requested (or loaded) with option #4, because #5
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclareGlobalOptionsIfPackage	{ m m o }
{
	\DeclareGlobalOptionsIfPackageOption {#1} {#2} {} [#3]
	%\gWaddToGlobal{#1} if #2 requested (or loaded), because #3
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclareGlobalOptionsIfPackageOption	{ m m m o }
{
	\gW@ifPackageRequestedWithOptionT {#2}[#3]
	{ \gW@addGlobalOption{#1} }
	%\gWaddToGlobal{#1} if #2 requested (or loaded) with option #3, because #4
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\gW@ifPackageRequestedWithOptionT	{ m o m }
{
	\clist_map_inline:nn {#1}
	{
		\@ifpackageloaded{##1}
		{
			\IfValueTF{#2}
			{ % TODO TEST FOR EMPTY
				\clist_if_in:cnT {opt@##1.sty} {#2}
				{ #3 }
			}{
				\PackageWarning{ gWpkgs }{ ##1 was already loaded, so this may be ineffective... }
				#3
			}
		}{
			\AddToHook{ gWpkgs / Request Package / ##1 }
			{
				\IfValueTF{#2}
				{
					\clist_if_in:cnT {opt@##1.sty} {#2}
					{#3}
				}{
					#3
				}
			}
		}
	}
}
\NewDocumentCommand	\gW_check_packages_loaded	{ s }
{% \cs{RequestPackage} all packages already \cs{RequirePackage}d.
	%\seq_map_inline:Nn \l_pclist_classes_seq {}
	\seq_map_inline:Nn \l_pclist_packages_seq {\RequestPackage{##1}}
}
%    \end{macrocode}
%    \begin{macrocode}
\DeclareDocumentCommand	\LoadPackagesNow	{ o }
{
	\RequestPackage{#1}

	\ifTUTeX% engine is unicode-native, so drop \pkg{inputenc} entirely and add \pkg{fontspec} for \pkg{fontenc}
		%\RemoveFromHook{ gWpkgs / Load Packages Now }[ inputenc ]
		\RequestPackageIfPackage{ fontspec }{ fontenc }
	\fi

	%For each package already loaded:
	% 1 remove ordering rule `after' \cs{LoadPackagesNow}.
	% 2 declare an ordering rule `before' \cs{LoadPackagesNow}. This should generate errors if any rules conflict.

	\UseHook{ gWpkgs / Load Packages Now }
}
%    \end{macrocode}
%    \begin{macrocode}
\let\ifPackageLoadedTF\@ifpackageloaded
%https://tex.stackexchange.com/a/484092
%http://mirrors.ctan.org/macros/generic/ltxcmds/ltxcmds.pdf
\NewDocumentCommand	\ifPackageLoadedOrRequestedTF	{ m m m }
{\ifValueT{#1}{\@ifnotmtarg{#1}{%
	\@ifpackageloaded{ #1 }
	{	#2	}
	{
		%if package requested
		% #2
		%otherwise
		% #3
	}
}}}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DeclarePackageOrdering}
%
% \begin{arguments}
%  \item \marg{ package~to~order }
%  \item \marg{ before~or~after }
%  \item \marg{ list~of~other~packages }
%  \item \oarg{ reason~why~ordering }
% \end{arguments}
%
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageOrdering	{ m m m o}
{
	\clist_map_inline:nn{ #3 }
	{\@ifnotmtarg{##1}{
		\@ifpackageloaded{ ##1 }
		{
			\DeclareHookRule{ gWpkgs / Load Packages Now }
				{ ##1 }{before}{ gWpkgs / Load Packages Begin }
		}{
			\DeclareHookRule{ gWpkgs / Load Packages Now }
				{ ##1 }{after}{ gWpkgs / Load Packages Begin }
		}
		\DeclareHookRule{ gWpkgs / Load Packages Now }
			{ #1 }{ #2 }{ ##1 }
	}

	\DeclareHookRule{ gWpkgs / Load Packages Now }{ #1 }{before}{ gWpkgs / Load Packages Completed	}%
}}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageDependency	{ s m m o }
{
	\IfBooleanF {#1}
	{ % It's possible that a package is required to be loaded, but not necessarily that it be loaded *first*
		\DeclarePackageOrdering{#2}{after}{#3}
	} % For example, \pkg{hyperxmp} requires \pkg{hyperref} in order to function, but can be loaded before or after

	\RequestPackageIfPackage{#3}{#2}[#4]
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageDependencyIfPackage	{ s m >{\SplitList{,}}m m o }
{
	% if #4, then \DeclarePackageDependency#1{#2}{#3}[#5]
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocumentCommand	\DeclarePackageDependencyIfPackageOption	{ s m >{\SplitList{,}}m m m o }
{
	% if #5 was passed to #4 (and #4 requested/loaded), then \DeclarePackageDependency#1{#2}{#3}[#6]
}
%    \end{macrocode}
%    \begin{macrocode}
\DeclareHookRule{ gWpkgs / Load Packages Now }
{	gWpkgs / Before Class	}{before}{	gWpkgs / Class Loaded	}%
\DeclareHookRule{ gWpkgs / Load Packages Now }
{	gWpkgs / Class Loaded	}{before}{	gWpkgs / Load Packages Completed	}%
\DeclareHookRule{ gWpkgs / Load Packages Now }
{	gWpkgs / Load Packages Begin	}{before}{	gWpkgs / Before Class	}%
\DeclareHookRule{ gWpkgs / Load Packages Now }
{	gWpkgs / Load Packages Begin	}{before}{	gWpkgs / Class Loaded	}%
\DeclareHookRule{ gWpkgs / Load Packages Now }
{	gWpkgs / Load Packages Begin	}{before}{	gWpkgs / Load Packages Completed	}
%    \end{macrocode}
%%TODO: maybe configure something so that ordering rules loaded *after* the defaults can allow something to load before the class, but otherwise force everything to load after the class?
%%TODO: maybe load the default ordering rules inside \cs{LoadPackagesNow}? Or inside the HookOnce? Therefore, all packages have been requested before the ordering rules are applied so we can do some additional logic?
%%TODO: check if package already loaded and order it before `first' with no other rules...
%    \begin{macrocode}
\AddToHook{ gWpkgs / Load Packages Now }[gWpkgs / Before Class]%
{%
	\PackageInfo{ gWpkgs / Load Packages Now }{ gWpkgs / Before Class }%
}%
\AddToHook{ gWpkgs / Load Packages Now }[gWpkgs / Class Loaded]%
{%
	\PackageInfo{ gWpkgs / Load Packages Now }{ gWpkgs / Class Loaded }%
}%
%
\AddToHook{ gWpkgs / Load Packages Now }[gWpkgs / Load Packages Begin]%
{	\LogHook{ gWpkgs / Load Packages Now }	}%
%
\AddToHook{ gWpkgs / Load Packages Now }[gWpkgs / Load Packages Completed]%
{%
	\PackageInfo{ gWpkgs / Load Packages Now }{ gWpkgs / Load Packages Completed }%
}%
%    \end{macrocode}
%    \begin{macrocode}
\RequirePackage{ gWpkgs }%
%
%\AddToHook{ gWpkgs / Load Packages Now }[late]
%{	\PackageInfo{ gWpkgs / Load Packages Now }{ Finished~`late'~package~load~order }	}
%
%\DeclareDefaultHookRule{ late	}{after}{	gWpkgs / Class Loaded	}%
%
%    \end{macrocode}
%    \begin{macrocode}
\AtEndPreamble
{	\UseOneTimeHook{ gWpkgs / Load Packages Now }	}
%    \end{macrocode}
%
% \end{macro}
%
%</sty>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*cls>
%
% \section{ \cls{ \filename } ~ document ~ class }
\RequirePackage{ gWmaths, 	}%
\GetFileInfo{\currfilename}%
%
% \begin{macro}{gWsetup}
%
% Set up our options 
%
%    \begin{macrocode}
\keys_define:nn { gWmaths }
{
	autodate	.bool_set:N	= \gW@autodate	,

	hyperTeX	.bool_set:N	= \gW@hyperTeX	,

	ntheorem	.bool_set:N	= \gW@ntheorem	,

	amsmath	.bool_set:N	= \gW@amsmath	,

	hypdoc	.bool_set:N	= \gW@hypdoc	,

	amsthm	.bool_set:N	= \gW@amsthm	,

	accessibility	.bool_set:N	= \gW@accessibility	,

	tagpdf	.bool_set:N	= \gW@tagpdf	,

	axessibility	.bool_set:N	= \gW@axessibility	,

	videolecture	.bool_set:N	= \gW@videolecture	,
	oneinch	.bool_set:N	= \gW@oneinch	,
	
	titlesec	.bool_set:N	= \gW@titlesec	,

	venn	.bool_set:N	= \gW@venn	,

	documentClass	.tl_set:N	= \gW@documentClass	,
	documentClass	.default:n	= article	,	% .default vs .initial-value
	syllabus	.meta:n	= {
		documentClass	= article	,
			}	,
	syllabus	.value_forbidden:n	= true	,
	exam	.meta:n	= {
		documentClass	= exam	,
			}	,
	exam	.value_forbidden:n	= true	,
	lecture	.meta:n	= {
		documentClass	= article	,
			}	,
	lecture	.value_forbidden:n	= true	,
	course	.meta:n	= {
		documentClass	= report	,
			}	,
	course	.value_forbidden:n	= true	,
	quiz	.meta:n	= {
		documentClass	= article	,
			}	,
	quiz	.value_forbidden:n	= true	,
	handout	.meta:n	= {
		documentClass	= article	,
			}	,
	handout	.value_forbidden:n	= true	,
	dtx	.meta:n = {
		documentClass	= l3doc	,
			}	,
	dtx	.value_forbidden:n	= true	,


}
%
\NewDocumentCommand \gWmathssetup { m } {
	\keys_set:nn { gWmaths } { #1 }
}
%    \end{macrocode}
%
% Set our default options
%
%    \begin{macrocode}
\gWmathssetup
{
	hyperTeX,
	ntheorem,
	%hypdoc, % this is messy
	documentClass=article,
	amsmath,
}
%    \end{macrocode}
%    \begin{macrocode}
\ifpdf
	\gWmathssetup{autodate}
\fi
%    \end{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Prepare arguments for all the packages
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All documents are UTF-8 in the 21st century. If not, fix your document.
%    \begin{macrocode}
\gW@addGlobalOption{utf8}%
\RequestPackage[utf8]{inputenc}%
%    \end{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Set up modern defaults for encodings:
%
%    \begin{macrocode}
\PassOptionsToPackage{% \pkg{cmap}
	resetfonts,	% Clear any already-loaded fonts and reload
}{cmap}% maps font glyphs back to unicode characters (allows copy/pasta from PDF).
\PassOptionsToPackage{% `mmap`
	noTeX % use unicode codepoints, not \TeX* names, [2008/08/11]
}{mmap} % \pkg{mmap} extends \pkg{cmap} with math mappings.
\DeclarePackageDependency{mmap}{cmap}[\pkg{mmap} loads \pkg{cmap} without options immediately...unless \pkg{mmap} decides not to load (\cs{RequirePDFTeX})]
%    \end{macrocode}
%
\RequestPackage[% \pkg{url}
	obeyspaces, % allow spaces in URLs, but be wary of backslashes 
	hyphens, % allow line-breaks to happen in an *already* hyphenated URL
	lowtilde, % always use math tilde \cs{sim}
]{url}% \pkg{hyperref} loads \pkg{url} and then patches it
%
\PassOptionsToPackage{% \pkg{showkeys}
	color, % allow labels to be colored by defining \meta{color}s
	notref, % do not redefine \cs{ref} and \cs{pageref} (\pkg{varioref})
	notcite, % do not redefine \cs{cite} et al (\pkg{natbib}
}{showkeys} % print \cs{label} name in margin or superscript
%
\PassOptionsToPackage{% \pkg{varioref}
	nospace, % documented as being required because the default from 2001 was wrong...but compatabililty...
}{varioref} % \cs{vref} adds text indication document location
%
%\ifdraft{
%\PassOptionsToPackage{%
%	draft
%}{bookmark}%TODO: replace this with just a damn \DeclareOption
%}{}% \ifdraft
%
\RequestPackage[% \pkg{bookmark} for \pkg{hyperref}
	atend, % define \cs{BookmarksAtEnd} 
	%color=anyshit , % PDFv1.4+
]{bookmark}
%
\PassOptionsToPackage{% \pkg{backref}
	%hyperref, % already global option? Also, \pkg{hyperref} loads \pkg{backref} if \meta{backref} passed to it.
	hyperpageref, % \pkg{hyperref} loads \pkg{backref} if \meta{pagebackref} passed to it
}{backref}
%
%% Set up \HyperTeX* (hyperref, et al), which is basically the structural core of the document:
\bool_if:nT \gW@hyperTeX
{
	\AddToHook{ package/before/hyperref }
	{% Choose violence over \cls{beamer}.
	%TODO: *check* if implicit=true before forcing it here
	%TODO: do this only if \cls{beamer} is to be loaded? Or, do we just *always* want `implicit'?
	%TODO: can \pkg{hyperref}'s `implicit's be fixed to new hooks?
		\PassOptionsToPackage
		{
			implicit=false,
			implicit=true
		}{hyperref}
	} % hook: package/before/hyperref
	\PassOptionsToPackage
	{
		implicit, % Redefine \LaTeX* internals, already default
		hypertexnames, % Use guessable names for anchors, already default
		%hyperfigures, % make figures hyper links
		hyperfootnotes, % set up hyperlinked footnotes, already default
	 	hyperindex, % links index entries back to main text, conflicts with hypdoc, already default
	}{hyperref}
}% \@gWhyperTeX

\ifTUTeX
	\PassOptionsToPackage
	{ % Documentation expressly states that \TUTeX* should use \meta{pdfencoding=unicode}
		pdfencoding=unicode,	% set 'auto' to prefer PDFEncoding over UTF-16.
	}{hyperref}
\fi

\RequestPackage[% `hyperref`
	bookmarks, % Write TOC as PDF bookmarks
	%driverfallback=hypertex, % if can't autodetect, then just use the most basic

	colorlinks, % set hyperlinks in color
	linkcolor=blue, % default is fucking 'red'

	linktoc=all, % link section name *and* page number from toc
	backref, % link back from bib entries to main text

	%pdflang=en-us, % `hyperxmp` automatically sets this from the language of `babel`
	pdfusetitle, % use \title{} for PDF metadata
	pdfdisplaydoctitle, % set PDF display \title{} in UI title bar
	pdfpagelabels, % tag pages with page numbers from \LaTeX* ("ii" or whatever)
]{hyperref}
\DeclarePackageDependency*{hyperxmp}{hyperref}
%% Inform *all* packages that `hyperref` is in use:
%\gW@addGlobalOption{hyperref}
\DeclareGlobalOptionsIfPackage
{hyperref}{hyperref}[many packages like to be told if \pkg{hyperref} is in use]
%
\RequestPackageIfPackageOption
{bookmark}{hyperref}{bookmarks}[\pkg{bookmark} replaces \pkg{hyperref}'s PDF bookmarks implementation]
\PassOptionsToPackageIfPackage
{bookmarks}{hyperref}{bookmark}[\pkg{bookmark} replaces \pkg{hyperref}'s PDF bookmarks implementation]
%
\PassOptionsToPackageIfPackage
{hyperref}{xcolor}{hyperref}[color expressions by defining additional keys]
%
\PassOptionsToPackageIfPackage
{hyperref}{ntheorem}{hyperref}
%
\AddToHook{ package / after / hyperxmp }
{
	\ifcsdef{hypersetup}
	{
		\hypersetup
		{
			keeppdfinfo % `hyperxmp` strips Author and Keywords by default; don't do that.
		}
	}{
		\PassOptionsToPackage{keeppdfinfo}{hyperref}
	}
}

%
%% Set up `scrbase` not to argue with iftex.
\PassOptionsToPackageIfPackage
{internalonly}{scrbase}{iftex}[don't define macros to conflict with `iftex`] % KOMA-Script base package


%
%% Set up documentation utilities from `hyperref` documentation package.
\PassOptionsToPackageIfPackage
{hyperindex=false}{hyperref}{hypdoc}[do *not* link page numbers from index...conflict w/ hypdoc...]

%
%% Use colors now that we have color printers and video screens...
\RequestPackage[% `xcolor`
	xcdraw, % use PS/PDF commands to draw frames and boxes, in dvips, pdftex, dvipdfm
	fixinclude, % prevents dvips from explicitly resetting current color to black before actually inserting an .eps file
	%fixpdftex % Load the `pdfcolmk` package; useless stub
	dvipsnames, % Load a set of predefined colors according to \TeX*.
	svgnames, % Load a set of predefined colors according to SVG 1.1.
	x11names*, % Load a set of predefined colors according to Unix/X11, delayed.
	table, % Load the `colortbl` package
]{xcolor}
%
%% Set up a much nicer set of theorem environments:
\bool_if:nT \gW@ntheorem{
\RequestPackage[% `ntheorem`
	thmmarks, % enables the automatical placement of endmarks
	thref, % enables the extended reference features
	standard % load predefined environments
]{ntheorem}
%
%% Inform *all* packages that `ntheorem` is in use:
%\gW@addGlobalOption{ntheorem}
\DeclareGlobalOptionsIfPackage{ntheorem}{ntheorem}[some packages like to be told if \pkg{ntheorem} is in use]
%%
\PassOptionsToPackageIfPackage
{ntheorem}{empheq}{ntheorem}[cope with `ntheorem`]
\PassOptionsToClassIfPackage
{noamsthm}{beamer}{ntheorem}[prevent from loading `amsthm`, which conflicts with `ntheorem`]

}%\gW@ntheorem

%
%% Set up the most common mathematics package:
\bool_if:nT \gW@amsmath{
\RequestPackage{amsmath}
%
%% Inform *all* packages that `amsmath` is in use:
\gW@addGlobalOption{amsmath}
\DeclareGlobalOptionsIfPackage{amsmath}{amsmath}[some packages like to be told if \pkg{amsmath} is in use]
%%
\PassOptionsToPackageIfPackage
{amsmath}{ntheorem}{amsmath}[cope with `amsmath`]
}%\gW@amsmath

%
%% Set up formatting for telephone numbers:
\RequestPackage[% `phonenumbers`
	country=US, % switch defaults from DE to US.
	foreign=international, % Use sensible defaults for full ITU numbers.
	home-country=none, % Do not strip the country code (default).
	home-area-code=none, % Do *not* strip area code, ever (default).
	link=on % clickable tel: link (default).
]{phonenumbers}

%
%% Set up a nicer quotation package:
\RequestPackage[% `csquotes`
	autostyle=try, % use `babel` if available
	%autopunct % look ahead for trailing punctuation to move inside marks
]{csquotes}



\RequestPackage[% `currfile`
	abspath, %-recorder (default in latexmk)
	realmainfile,
	parent,
	%parents,
]{currfile}



\PassOptionsToClass{% `beamer`
	t % do not center everything
}{beamer}




%\PassOptionsToPackage{% `babel`
	%english % The language can be tagged on the \documentclass declaration!
		%}{babel}

\RequestPackage[%
	%heightrounded % round off to avoid overfull alrgn;earujs
]{geometry}


\bool_if:nT \gW@autodate{%
	\ifXeTeX%
		\RequirePDFTeX % or LuaTeX
	\else%
		\AtEndOfClass{ \date{ \filemodprintdate{ \jobname.tex } } }%
	\fi%
}%




%\let\@classoptionslist\gW@classoptionslist
% ref: https://www.overleaf.com/learn/latex/Writing_your_own_class
% ref: https://www.latex-project.org/help/documentation/clsguide.pdf

\bool_if:nT \gW@accessibility{
	\RequirePDFTeX
}
%\bool_if:nTF \gW@axessibility{}{}
\bool_if:nT \gW@videolecture{
	\gWmathssetup{documentClass = beamer}
}

%declare option for setting margin to 1"
%\bool_if:nTF \gW@oneinch{}{}


% The \LaTeXe* way:
%\newif\ifgW@myoption% create a flag for this option
%\DeclareOption{someoption}{\gW@myoptiontrue}% if the option is set, then raise the flag


\ProcessKeysOptions{gWmaths}

\DeclareOption*{\PassOptionsToClass{\CurrentOption}{\gW@documentClass}}
\ProcessOptions\relax

\ifLuaTeX
	\RequirePackage{pdftexcmds}
\fi

\ifPDFTeX
	\pdfminorversion=6 %fucking hack for `accessibility`
	\DeclarePackageOrdering{cmap}{unrelated}{hyperref}[by using \cs{pdfminorversion} here, we obviate the ordering dependency]
%	\pdf_version_gset:n {6}
%	\pdf_version_min_gset:n {6}
\fi



\ifTUTeX% engine is unicode-native, so drop \pkg{inputenc} entirely and force \pkg{fontspec} for \pkg{fontenc}
	\RemoveFromHook{ gWpkgs / Load Packages Now }[ inputenc ]
	%\RequirePackageBeforePackage{ fontspec }{ fontenc }
\else% engine is not unicode-native
	\RequestPackage[utf8]{inputenc}[2015/01/01]
	% When using older engines, this tells the engine to read all files as UTF-8.
	% \XeTeX* and \LuaTeX* always read UTF-8 and ignore this package.
	% \LaTeX* circa 2018 and newer default to UTF-8 as well.
\fi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load the base document class
%\LoadClass{\gW@documentClass}%
\RequestClass{\gW@documentClass}%
%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Begin actually loading packages
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% See https://github.com/mhelvens/latex-pkgloader/blob/master/pkgloader-recommended.sty
%%
\RequestPackage{
	babel,
	hyperxmp, % babel cannot set the pdf-lang option for hyperref, but it can through hyperxmp!

	%amsfonts,
	%amssymb,
	amsmath,
	%mathtools,
%%don't use: http://mirrors.ctan.org/macros/latex/required/amscls/doc/amsthdoc.pdf
}

%TODO: \RequestPackageIfBool
\bool_if:nT \gW@venn{
%TODO: load this if \cls{beamer}, since it loads \pkg{pgf}
%TODO: detect \pkg{pgf} and default this on?
\RequestPackage{
	venndiagram,	%https://tex.stackexchange.com/a/381249
}}




\bool_if:nT \gW@oneinch{
	\AtEndOfClass{
		\geometry{
			%letterpaper, % screen % TODO: try to get this to auto-detect or something so \documentclass[a4paper,landscape]{gWmaths} works
			margin=1in
				}
			}
}%\gW@oneinch

%\ifgW@myoption % if the flag is set, then do some thing
%   code active only for this option
%\fi

%\DeclarePackageOrdering{ graphicx }{before}{ fontspec }
\RequestPackage{graphicx}
	% docs say to only load one, and package/classes should  `s' not `x' as the user may s->x but not back
	% literally the only difference is the `keyval' package, therefore just use `x'.
	% `x' loads `s'...

\ifTUTeX % "Unicode \TeX*" matches \LuaTeX* and/or \XeTeX*
	\RequestPackage% must load *after* maths fonts (specifically euler)
		{fontspec}
	%\defaultfontfeatures{Ligatures=TeX} % Make ASCII nicer
	\RequestPackage{unicode-math} % Use unicode symbols, basically \pkg{mmap}
	
	%% Post-2017, don't use EU1/EU2 font encoding (nor T1, nor TS1, nor OT1)
	%% Post-2017, don't use xunicode package
	%% Post-2017, default `tuenc` package uses TU font encoding, full unicode.
\else \RequirePDFTeX % don't even with others
\PassOptionsToPackage{% `fontenc`
	T1	% T1 fonts extend the old OT1 format to allow greater than 128 characters
}{fontenc}
%
	\RequestPackage[utf8]{inputenc}
	\RequestPackage{%
		%mmap,
		cmap,
		fontenc,	% `fontenc` specifies which font format to import.
			}%
	% T1 fonts extend the old OT1 format to allow greater than 128 characters
	% `mmap` is `cmap` plus some math-specifics.
	% `cmap` extends default character mapping to include unicode codepoints.
	% something about ASCII or Unicode fonts: ...Package[noTeX]{mmap}
\fi%\ifTUTeX



%\RequirePackage[%
	%% docs: http://mirrors.ctan.org/macros/latex/contrib/standalone/standalone.pdf
%	subpreambles=false % do not automatically collect preambles
%		]{standalone}
%\documentclass[class=gWmaths,crop=false]{standalone}
%\standaloneconfig{}

%\RequestPackage[%
	%activeospeccharacters, % don't fuck with < and >
	%notheorems?
		%]{beamerarticle}
%\documentclass[ignorenonframetext]{beamer}
%\documentclass[trans]{beamer}
%Note: When using \include or \input commands, conversions of modes must be controlled manually. See Section 21.3 for details
%\mode<article>{\usepackage{fullpage}}
%\mode<presentation>{\usetheme{Berlin}}
%\subsection<article>{Article-Only Section}
%\only<article>{\item This particular item is only part of the article version.}
%\item<presentation:only@0> This text is also only part of the article.
%The command \setjobnamebeamerversion{main.beamer} tells the article version where to find the presentation version. This is necessary if you wish to include slides from the presentation version in an article as figures.
%By adjusting the frame template, you can “mimic” the appearance of frames typeset by beamer in your articles.


%https://tex.stackexchange.com/a/5231

%pdflatex --jobname=Cookies %\jobname


% \subsection{Required Packages}
%
% These packages are either required for some of our features, or are just really nice to have set up:
%\RequestPackage{fancyhdr}%


\bool_if:nF \gW@videolecture{
	\RequestPackage{paralist} % `paralist` redefines {itemize}, {enumerate} environments
%\RequestPackage[ % `enumitem` redefines {itemize}, {enumerate} environments
	% `enumitem` is substantially more complex than `paralist`
	%shortlabels, % compatible with `enumerate`
	%unboxed % avoid problems nesting environments
		%]{enumitem}
}%\gW@videolecture



%\RequestPackage% `pdfpages` improves inserting PDF clippings over graphicx
%	{pdfpages} % http://mirrors.ctan.org/macros/latex/contrib/pdfpages/pdfpages.pdf

\RequestPackage{%
	xcolor,
	phonenumbers,
	csquotes,
	geometry,
	filemod,
	ifdraft,
		}%

\bool_if:nF \gW@videolecture{%
	%\RequestPackage{titling} % un-dumb \maketitle % see \pkg{titlesec}
}%\gW@videolecture

%define new \listofXs
% docs: http://mirrors.ctan.org/macros/latex/contrib/tocloft/tocloft.pdf

\DeclarePackageOrdering{ tagpdf }{before}{ axessibility }% included anyway
\ifPDFTeX% not \XeTeX* nor \LuaTeX*
	\bool_if:nT \gW@accessibility
	{% This package is the magic that associates, structures, and tags the TeX sources to show up in the PDF:
		\RequestPackage[% `accessibility` is badly hacked together and quite old...
			tagged,
			highstructure,
				]{accessibility}
	}
\else
	\ifLuaTeX
		\PassOptionsToPackage{tagpdf}{axessibility}
		\RequestPackage{tagpdf} % official work-in-progress package for future integrated tagging
	\else % \XeTeX*
		\let\pdfcompresslevel\pdf@compress@xetex
		\PassOptionsToPackage{accsupp}{axessibility}
	\fi
	%\RequestPackage{axessibility}
\fi%\ifPDFTeX

%http://mirrors.ctan.org/macros/latex/contrib/titlesec/titlesec.pdf % too complex

\RequestPackage{% `hyperref` claims to be about hypertext, but it's actually a significant structural support!
	%% NOTE: https://tex.stackexchange.com/q/1863
	hyperref,
	bookmark, % replaces \pkg{hyperref}'s PDF TOC implementation
	backref, % auto-loaded by \pkg{hyperref} already
	nameref, % not auto-loaded by \pkg{hyperref} despite being part of the bundle...
		% \pkg{nameref} patches a bunch of shit, including \pkg{titlesec, beamer, varioref, ifthen, listings}
		}% %also: http://mirrors.ctan.org/macros/latex/contrib/hyperref/doc/manual.html#x1-520009

\bool_if:nT \gW@hypdoc{	\RequestPackage{hypdoc}	}%

%\RequestPackage[
	%linewidth = 1 % TODO: what is `linewidth` for?
		%]{pdfcomment}

%hack for some releases of \TeXLive* which disable auto-detection
%\ifXeTeX\geometry{xetex}\fi%
%\ifLuaTeX\geometry{luatex}\fi%

\ifLuaTeX
%	\RequestPackage{pdftexcmds}
\fi



\RequestPackage{filehook,currfile}[2020/09/29]%

% \begin{macro}{gitinfo2}
% \pkg{gitinfo2} loads several other packages, including \pkg{xstring} and \pkg{xcolor}, so throw it at the end for now.
%    \begin{macrocode}
\RequestPackage{gitinfo2}%
%    \end{macrocode}
%\end{macro}

%\RequestPackage{ifthen}%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ugly hack, because of the unfortunate deprecation of 'n' to 'c' conversion,
% plus the fact that kernel errors, even non-fatal ones, cannot be redirected.
% Will think of a better solution at some point, but not now.
%\let\__withargs_docs_old_kernel_msg_error:nnnnnn\__kernel_msg_error:nnnnnn
%\def\__kernel_msg_error:nnnnnn#1#2{
%  \str_if_eq:nnTF { #1/#2 } { kernel/deprecated-variant }{
%    \__kernel_msg_warning:nnnnnn{#1}{#2}
%  }{
%    \__withargs_docs_old_kernel_msg_error:nnnnnn{#1}{#2}
%  }
%}
%\fi%???????
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\LoadPackagesNow% \pkg{pkgloader}


\ifcsdef{GetFileInfo}
{% https://tex.stackexchange.com/a/30486
	\GetFileInfo{\currfilename}
	\@ifundefined{fileinfo}{}{\hypersetup{
		pdfsubject={\fileinfo}, % this takes the name/description of the *class*...
			}}

	\AtEndOfClass{%
		%\GetFileInfo{\jobname.tex} % read \ProvidesFile{}[] from the ultimate TeX
		%\listfiles % track loaded files in this job
		%\@getclass
		%\date{\filemodprintdate{\filename}}
			}
}{}% \GetFileInfo


\hypersetup{%
	%pdflang={en-US}, % `hyperxmp` will ask `babel` for the language code!
		}

\ifXeTeX%
	\PackageWarning{ gWmaths }{ \XeTeX* ~ does ~ not ~ provide ~ cs{pdffilemoddate} }
\else%
	\hypersetup{
		pdfcreationdate={\pdffilemoddate{\jobname.tex}},
	}
\fi%\ifXeTeX

\AtBeginDocument{%
	\listfiles % track loaded files in this job
	%\date{omg}
	\hypersetup{%
		pdfrendition=default, %screen,
		%pdfsubject={},
		%pdfsubtitle={},
		%pdfurl={}, % full path to *this* PDF
		%pdfinfo={%
			%CreationDate={\pdffilemoddate{\jobname.tex}}
		%		},
		%pdfsource={\jobname.tex} % default
		pdfuapart=true, %1 % that's the whole point, but we're lacking...
			}
		}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% preserve document metadata...
\AtEndPreamble
{
	%\let\doctitle\@title
	%\let\docauthor\@author
	%\let\docthanks\@thanks % this is bjorked due to missing macros
	%\let\docdate\@date
}




\providecommand*{\q}[2][]{\blockquote[#1][]{#2}}
	% Short-hand for quotes via `csquotes`
	% TODO: \blockcquote
	% \providencommand can't more than one optional argument...
	%% ref: https://tex.stackexchange.com/a/29975
	%% ref: https://www.overleaf.com/learn/latex/Commands
	%% ref: https://tex.stackexchange.com/questions/321435/newcommand-and-renewcommand-difficulty-in-class-file
	%% ref: https://stackoverflow.com/questions/1812214/latex-optional-arguments
	%% ref: https://tex.stackexchange.com/a/1057
	

%\RequestPackage{xspace}%
\AtBeginDocument{%
	\hologoSetup{%
		break=false
			}
		}


\RequestPackage{layouts}%
\providecommand{\drawlayouts}%
{
	\drawdimensionstrue
	\printinunitsof{in}
	\pagediagram   % draws diagram with all layout vernacular identified (except bottom margin)
	\pagevalues
	\currentpage
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parts, Chapters, Sections, Subsections, Subsubsections, Paragraphs, Subparagraphs
%%
% https://www.overleaf.com/learn/latex/sections_and_chapters
% https://en.wikibooks.org/wiki/LaTeX/Document_Structure#Sectioning_commands
%%

% Set our header depth to maximum 3:
\setcounter{secnumdepth}{3} % '3' is default, and numbers to subsubsections not paragraphs
\setcounter{tocdepth}{2} % number to subsection, not subsubsection
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\bool_if:nT \gW@videolecture{
	\providecommand*{\theorembreak}{\usebeamertemplate{theorem end}\framebreak\usebeamertemplate{theorem begin}}
}%\gW@videolecture

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






\ExplSyntaxOff





%
\RequestPackage{tabstackengine,xcolor,fancybox,graphicx}
%\AtBeginDocument{\cornersize{.1}}
\newcommand\blackcard[2]{%
  \begingroup\cornersize{.1}\fboxsep=0pt\relax
  \Ovalbox{\tabbedCenterstack{%
  \makebox[0pt][l]{\scriptsize$#2$} && \\
    &\makebox[22pt]{#1}&\\
    &&\makebox[0pt][r]{\rotatebox[origin=c]{180}{\scriptsize$#2$}}}}%
  \endgroup}
\newcommand\redcard[2]{%
  \begingroup\cornersize{.1}\fboxsep=0pt\relax
  \Ovalbox{\color{red}\tabbedCenterstack{%
  \makebox[0pt][l]{\scriptsize$#2$} && \\
    &\makebox[22pt]{#1}&\\
    &&\makebox[0pt][r]{\rotatebox[origin=c]{180}{\scriptsize$#2$}}}}%
  \endgroup}
\newcommand\jokerface{\raisebox{-2pt}{\kern-1pt\stackengine{0pt}{%
  \stackinset{c}{1pt}{c}{-.4pt}{\stackunder[.7pt]{$\cdot\kern2pt\cdot\kern0.3pt$}%
  {--}}{$\bigcirc$}}{\,$\steaming$}{O}{c}{F}{F}{S}}}
\newcommand\joker{\vcenter{\hbox{\scalebox{.4}{ \tiny JOKER }}}}
%\begin{document}
%\blackcard{Q}{\spadesuit}
%\redcard{10}{\varheartsuit}
%\redcard{A}{\vardiamondsuit}
%\blackcard{\jokerface}{\joker}
%\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Begin user defined commands

\providecommand{\map}[1]{\xrightarrow{#1}}

\providecommand{\bc}{\mathbb C}
\providecommand{\bF}{\mathbb F}
\providecommand{\bH}{\mathbb H}
\providecommand{\bn}{\mathbb N}
\providecommand{\bz}{\mathbb Z}
\providecommand{\bp}{\mathbb{P}}
\providecommand{\bq}{\mathbb Q}
\providecommand{\br}{\mathbb R}


\providecommand{\zbar}{\overline{\mathbb{Z}}}
\providecommand{\qbar}{\overline{\mathbb{Q}}}

\providecommand{\la}{\langle}
\providecommand{\ra}{\rangle}
\providecommand{\lra}{\longrightarrow}
\providecommand{\hra}{\hookrightarrow}
\providecommand{\bs}{\backslash}

\providecommand{\al}{\alpha}
\providecommand{\be}{\beta}

\DeclareMathOperator{\Aut}{Aut}
\DeclareMathOperator{\Aff}{Aff}
\DeclareMathOperator{\End}{End}
\DeclareMathOperator{\Hom}{Hom}
\DeclareMathOperator{\im}{im}

%\renewcommand{\labelenumi}{(\alphaph{enumi})}

\providecommand{\blankpage}	{%
      \clearpage%
      \thispagestyle{empty}%
      \addtocounter{page}{-1}%
      \null%
      \clearpage}

%  End user defined commands
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These establish different environments for stating Theorems, Lemmas, Remarks, etc.

\newtheorem{Pf}{Proof}

\newtheorem{Thm}{Theorem}
\newtheorem{Prop}[Thm]{Proposition}
\newtheorem{Lem}[Thm]{Lemma}
\newtheorem{Cor}[Thm]{Corollary}

\theoremstyle{definition}
\newtheorem{Def}[Thm]{Definition}

\theoremstyle{remark}
\newtheorem{Rem}[Thm]{Remark}
\newtheorem{Ex}[Thm]{Example}

\theoremstyle{definition}
\newtheorem{Exercise}{Exercise}

\newenvironment{Solution}{\noindent{\it Solution.}}


% End environments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%</cls>


%% https://tex.stackexchange.com/questions/108696/what-do-explsyntaxon-and-explsyntaxoff-do







%\begin{filecontents*}{platexmkrc}
%\end{filecontents*}
 %% git update-index --assume-unchanged from https://stackoverflow.com/a/10755704
 %% BUT WAIT: https://stackoverflow.com/a/13631525
 %% git update-index --skip-worktree gWmaths.cls gWmaths.sty README.md gWmaths.drv
%<*ins>
\begin{filecontents*}{.git/hooks/post-commit}
#!/bin/sh
# Copyright 2015 Brent Longborough
# Part of gitinfo2 package Version 2
# Release 2.0.7 2015-11-22
# Please read gitinfo2.pdf for licencing and other details
# -----------------------------------------------------
# Post-{commit,checkout,merge} hook for the gitinfo2 package
#
# Get the first tag found in the history from the current HEAD
FIRSTTAG=$(git describe --tags --always --dirty='-*' 2>/dev/null)
# Get the first tag in history that looks like a Release
RELTAG=$(git describe --tags --long --always --dirty='-*' --match '[0-9]*.*' 2>/dev/null)
# Hoover up the metadata
git --no-pager log -1 --date=short --decorate=short \
    --pretty=format:"\usepackage[%
        shash={%h},
        lhash={%H},
        authname={%an},
        authemail={%ae},
        authsdate={%ad},
        authidate={%ai},
        authudate={%at},
        commname={%cn},
        commemail={%ce},
        commsdate={%cd},
        commidate={%ci},
        commudate={%ct},
        refnames={%d},
        firsttagdescribe={$FIRSTTAG},
        reltag={$RELTAG}
    ]{gitexinfo}" HEAD > .git/gitHeadInfo.gin
\end{filecontents*}
%</ins>


